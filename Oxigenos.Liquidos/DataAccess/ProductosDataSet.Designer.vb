'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.832
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'Microsoft.CompactFramework.Design.Data generó automáticamente este código fuente, versión=2.0.50727.832.
'

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("ProductosDataSet")>  _
Partial Public Class ProductosDataSet
    Inherits System.Data.DataSet
    
    Private tableProductos As ProductosDataTable
    
    Private tablePrecios As PreciosDataTable
    
    Private tableKardexCamion As KardexCamionDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Productos() As ProductosDataTable
        Get
            Return Me.tableProductos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Precios() As PreciosDataTable
        Get
            Return Me.tablePrecios
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property KardexCamion() As KardexCamionDataTable
        Get
            Return Me.tableKardexCamion
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As ProductosDataSet = CType(MyBase.Clone,ProductosDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Productos")) Is Nothing) Then
                MyBase.Tables.Add(New ProductosDataTable(ds.Tables("Productos")))
            End If
            If (Not (ds.Tables("Precios")) Is Nothing) Then
                MyBase.Tables.Add(New PreciosDataTable(ds.Tables("Precios")))
            End If
            If (Not (ds.Tables("KardexCamion")) Is Nothing) Then
                MyBase.Tables.Add(New KardexCamionDataTable(ds.Tables("KardexCamion")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProductos = CType(MyBase.Tables("Productos"),ProductosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProductos) Is Nothing) Then
                Me.tableProductos.InitVars
            End If
        End If
        Me.tablePrecios = CType(MyBase.Tables("Precios"),PreciosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePrecios) Is Nothing) Then
                Me.tablePrecios.InitVars
            End If
        End If
        Me.tableKardexCamion = CType(MyBase.Tables("KardexCamion"),KardexCamionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableKardexCamion) Is Nothing) Then
                Me.tableKardexCamion.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ProductosDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProductosDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProductos = New ProductosDataTable
        MyBase.Tables.Add(Me.tableProductos)
        Me.tablePrecios = New PreciosDataTable
        MyBase.Tables.Add(Me.tablePrecios)
        Me.tableKardexCamion = New KardexCamionDataTable
        MyBase.Tables.Add(Me.tableKardexCamion)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProductos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePrecios() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeKardexCamion() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ProductosDataSet = New ProductosDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ProductosRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductosRowChangeEvent)
    
    Public Delegate Sub PreciosRowChangeEventHandler(ByVal sender As Object, ByVal e As PreciosRowChangeEvent)
    
    Public Delegate Sub KardexCamionRowChangeEventHandler(ByVal sender As Object, ByVal e As KardexCamionRowChangeEvent)
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo As System.Data.DataColumn
        
        Private columnDescripcion As System.Data.DataColumn
        
        Private columnCoeficienteProducto As System.Data.DataColumn
        
        Private columnPrecio As System.Data.DataColumn
        
        Private columnIva As System.Data.DataColumn
        
        Private columnUnidadMedidaVenta As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Productos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CoeficienteProductoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCoeficienteProducto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IvaColumn() As System.Data.DataColumn
            Get
                Return Me.columnIva
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaVentaColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnidadMedidaVenta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductosRow
            Get
                Return CType(Me.Rows(index),ProductosRow)
            End Get
        End Property
        
        Public Event ProductosRowChanging As ProductosRowChangeEventHandler
        
        Public Event ProductosRowChanged As ProductosRowChangeEventHandler
        
        Public Event ProductosRowDeleting As ProductosRowChangeEventHandler
        
        Public Event ProductosRowDeleted As ProductosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProductosRow(ByVal row As ProductosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductosRow(ByVal Codigo As String, ByVal Descripcion As String, ByVal CoeficienteProducto As Single, ByVal Precio As Single, ByVal Iva As Single, ByVal UnidadMedidaVenta As String) As ProductosRow
            Dim rowProductosRow As ProductosRow = CType(Me.NewRow,ProductosRow)
            rowProductosRow.ItemArray = New Object() {Codigo, Descripcion, CoeficienteProducto, Precio, Iva, UnidadMedidaVenta}
            Me.Rows.Add(rowProductosRow)
            Return rowProductosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodigo(ByVal Codigo As String) As ProductosRow
            Return CType(Me.Rows.Find(New Object() {Codigo}),ProductosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProductosDataTable = CType(MyBase.Clone,ProductosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProductosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo = MyBase.Columns("Codigo")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCoeficienteProducto = MyBase.Columns("CoeficienteProducto")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnIva = MyBase.Columns("Iva")
            Me.columnUnidadMedidaVenta = MyBase.Columns("UnidadMedidaVenta")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo = New System.Data.DataColumn("Codigo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigo)
            Me.columnDescripcion = New System.Data.DataColumn("Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCoeficienteProducto = New System.Data.DataColumn("CoeficienteProducto", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoeficienteProducto)
            Me.columnPrecio = New System.Data.DataColumn("Precio", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnIva = New System.Data.DataColumn("Iva", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIva)
            Me.columnUnidadMedidaVenta = New System.Data.DataColumn("UnidadMedidaVenta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedidaVenta)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodigo}, true))
            Me.columnCodigo.AllowDBNull = false
            Me.columnCodigo.Unique = true
            Me.columnCodigo.MaxLength = 10
            Me.columnDescripcion.MaxLength = 100
            Me.columnUnidadMedidaVenta.MaxLength = 5
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProductosRow() As ProductosRow
            Return CType(Me.NewRow,ProductosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProductosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductosRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductosRowChanged(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductosRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductosRowChanging(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductosRowDeleted(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductosRowDeleting(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProductosRow(ByVal row As ProductosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PreciosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodSucursal As System.Data.DataColumn
        
        Private columnCodCliente As System.Data.DataColumn
        
        Private columnCodProducto As System.Data.DataColumn
        
        Private columnPrecioNeto As System.Data.DataColumn
        
        Private columnPorcentajeDescuento As System.Data.DataColumn
        
        Private columnPorcentajeImpuesto As System.Data.DataColumn
        
        Private columnCodTipoMoneda As System.Data.DataColumn
        
        Private columnAplicaIva As System.Data.DataColumn
        
        Private columnTieneContrato As System.Data.DataColumn
        
        Private columnEstado As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Precios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioNetoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrecioNeto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeDescuentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPorcentajeDescuento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeImpuestoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPorcentajeImpuesto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoMonedaColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTipoMoneda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AplicaIvaColumn() As System.Data.DataColumn
            Get
                Return Me.columnAplicaIva
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TieneContratoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTieneContrato
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PreciosRow
            Get
                Return CType(Me.Rows(index),PreciosRow)
            End Get
        End Property
        
        Public Event PreciosRowChanging As PreciosRowChangeEventHandler
        
        Public Event PreciosRowChanged As PreciosRowChangeEventHandler
        
        Public Event PreciosRowDeleting As PreciosRowChangeEventHandler
        
        Public Event PreciosRowDeleted As PreciosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPreciosRow(ByVal row As PreciosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPreciosRow(ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String, ByVal PrecioNeto As Decimal, ByVal PorcentajeDescuento As Decimal, ByVal PorcentajeImpuesto As Decimal, ByVal CodTipoMoneda As String, ByVal AplicaIva As String, ByVal TieneContrato As String, ByVal Estado As String) As PreciosRow
            Dim rowPreciosRow As PreciosRow = CType(Me.NewRow,PreciosRow)
            rowPreciosRow.ItemArray = New Object() {CodSucursal, CodCliente, CodProducto, PrecioNeto, PorcentajeDescuento, PorcentajeImpuesto, CodTipoMoneda, AplicaIva, TieneContrato, Estado}
            Me.Rows.Add(rowPreciosRow)
            Return rowPreciosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodSucursalCodClienteCodProducto(ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String) As PreciosRow
            Return CType(Me.Rows.Find(New Object() {CodSucursal, CodCliente, CodProducto}),PreciosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PreciosDataTable = CType(MyBase.Clone,PreciosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PreciosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnPrecioNeto = MyBase.Columns("PrecioNeto")
            Me.columnPorcentajeDescuento = MyBase.Columns("PorcentajeDescuento")
            Me.columnPorcentajeImpuesto = MyBase.Columns("PorcentajeImpuesto")
            Me.columnCodTipoMoneda = MyBase.Columns("CodTipoMoneda")
            Me.columnAplicaIva = MyBase.Columns("AplicaIva")
            Me.columnTieneContrato = MyBase.Columns("TieneContrato")
            Me.columnEstado = MyBase.Columns("Estado")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodSucursal = New System.Data.DataColumn("CodSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodCliente = New System.Data.DataColumn("CodCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnCodProducto = New System.Data.DataColumn("CodProducto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnPrecioNeto = New System.Data.DataColumn("PrecioNeto", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioNeto)
            Me.columnPorcentajeDescuento = New System.Data.DataColumn("PorcentajeDescuento", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeDescuento)
            Me.columnPorcentajeImpuesto = New System.Data.DataColumn("PorcentajeImpuesto", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeImpuesto)
            Me.columnCodTipoMoneda = New System.Data.DataColumn("CodTipoMoneda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoMoneda)
            Me.columnAplicaIva = New System.Data.DataColumn("AplicaIva", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAplicaIva)
            Me.columnTieneContrato = New System.Data.DataColumn("TieneContrato", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTieneContrato)
            Me.columnEstado = New System.Data.DataColumn("Estado", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodSucursal, Me.columnCodCliente, Me.columnCodProducto}, true))
            Me.columnCodSucursal.AllowDBNull = false
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodCliente.AllowDBNull = false
            Me.columnCodCliente.MaxLength = 8
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnPrecioNeto.AllowDBNull = false
            Me.columnPorcentajeDescuento.AllowDBNull = false
            Me.columnPorcentajeImpuesto.AllowDBNull = false
            Me.columnCodTipoMoneda.AllowDBNull = false
            Me.columnCodTipoMoneda.MaxLength = 2
            Me.columnAplicaIva.AllowDBNull = false
            Me.columnAplicaIva.MaxLength = 1
            Me.columnTieneContrato.MaxLength = 1
            Me.columnEstado.MaxLength = 1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPreciosRow() As PreciosRow
            Return CType(Me.NewRow,PreciosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PreciosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PreciosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PreciosRowChangedEvent) Is Nothing) Then
                RaiseEvent PreciosRowChanged(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PreciosRowChangingEvent) Is Nothing) Then
                RaiseEvent PreciosRowChanging(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PreciosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PreciosRowDeleted(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PreciosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PreciosRowDeleting(Me, New PreciosRowChangeEvent(CType(e.Row,PreciosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePreciosRow(ByVal row As PreciosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PreciosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class KardexCamionDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodProducto As System.Data.DataColumn
        
        Private columnExistencias As System.Data.DataColumn
        
        Private columnIdHojaRuta As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "KardexCamion"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistenciasColumn() As System.Data.DataColumn
            Get
                Return Me.columnExistencias
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdHojaRutaColumn() As System.Data.DataColumn
            Get
                Return Me.columnIdHojaRuta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As KardexCamionRow
            Get
                Return CType(Me.Rows(index),KardexCamionRow)
            End Get
        End Property
        
        Public Event KardexCamionRowChanging As KardexCamionRowChangeEventHandler
        
        Public Event KardexCamionRowChanged As KardexCamionRowChangeEventHandler
        
        Public Event KardexCamionRowDeleting As KardexCamionRowChangeEventHandler
        
        Public Event KardexCamionRowDeleted As KardexCamionRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddKardexCamionRow(ByVal row As KardexCamionRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddKardexCamionRow(ByVal CodProducto As String, ByVal Existencias As Decimal, ByVal IdHojaRuta As Integer) As KardexCamionRow
            Dim rowKardexCamionRow As KardexCamionRow = CType(Me.NewRow,KardexCamionRow)
            rowKardexCamionRow.ItemArray = New Object() {CodProducto, Existencias, IdHojaRuta}
            Me.Rows.Add(rowKardexCamionRow)
            Return rowKardexCamionRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCodProductoIdHojaRuta(ByVal CodProducto As String, ByVal IdHojaRuta As Integer) As KardexCamionRow
            Return CType(Me.Rows.Find(New Object() {CodProducto, IdHojaRuta}),KardexCamionRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As KardexCamionDataTable = CType(MyBase.Clone,KardexCamionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New KardexCamionDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnExistencias = MyBase.Columns("Existencias")
            Me.columnIdHojaRuta = MyBase.Columns("IdHojaRuta")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodProducto = New System.Data.DataColumn("CodProducto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnExistencias = New System.Data.DataColumn("Existencias", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExistencias)
            Me.columnIdHojaRuta = New System.Data.DataColumn("IdHojaRuta", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdHojaRuta)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCodProducto, Me.columnIdHojaRuta}, true))
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnIdHojaRuta.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewKardexCamionRow() As KardexCamionRow
            Return CType(Me.NewRow,KardexCamionRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New KardexCamionRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(KardexCamionRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KardexCamionRowChangedEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowChanged(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KardexCamionRowChangingEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowChanging(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KardexCamionRowDeletedEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowDeleted(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KardexCamionRowDeletingEvent) Is Nothing) Then
                RaiseEvent KardexCamionRowDeleting(Me, New KardexCamionRowChangeEvent(CType(e.Row,KardexCamionRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveKardexCamionRow(ByVal row As KardexCamionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductosDataSet = New ProductosDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "KardexCamionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class ProductosRow
        Inherits System.Data.DataRow
        
        Private tableProductos As ProductosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductos = CType(Me.Table,ProductosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo() As String
            Get
                Return CType(Me(Me.tableProductos.CodigoColumn),String)
            End Get
            Set
                Me(Me.tableProductos.CodigoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductos.DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'Productos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoeficienteProducto() As Single
            Get
                Try 
                    Return CType(Me(Me.tableProductos.CoeficienteProductoColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CoeficienteProducto' de la tabla 'Productos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.CoeficienteProductoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Single
            Get
                Try 
                    Return CType(Me(Me.tableProductos.PrecioColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Precio' de la tabla 'Productos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.PrecioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Iva() As Single
            Get
                Try 
                    Return CType(Me(Me.tableProductos.IvaColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Iva' de la tabla 'Productos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.IvaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedidaVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductos.UnidadMedidaVentaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'UnidadMedidaVenta' de la tabla 'Productos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.UnidadMedidaVentaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableProductos.DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableProductos.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoeficienteProductoNull() As Boolean
            Return Me.IsNull(Me.tableProductos.CoeficienteProductoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoeficienteProductoNull()
            Me(Me.tableProductos.CoeficienteProductoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tableProductos.PrecioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tableProductos.PrecioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIvaNull() As Boolean
            Return Me.IsNull(Me.tableProductos.IvaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIvaNull()
            Me(Me.tableProductos.IvaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadMedidaVentaNull() As Boolean
            Return Me.IsNull(Me.tableProductos.UnidadMedidaVentaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadMedidaVentaNull()
            Me(Me.tableProductos.UnidadMedidaVentaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class PreciosRow
        Inherits System.Data.DataRow
        
        Private tablePrecios As PreciosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrecios = CType(Me.Table,PreciosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Return CType(Me(Me.tablePrecios.CodSucursalColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Return CType(Me(Me.tablePrecios.CodClienteColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tablePrecios.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodProductoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioNeto() As Decimal
            Get
                Return CType(Me(Me.tablePrecios.PrecioNetoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePrecios.PrecioNetoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeDescuento() As Decimal
            Get
                Return CType(Me(Me.tablePrecios.PorcentajeDescuentoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePrecios.PorcentajeDescuentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeImpuesto() As Decimal
            Get
                Return CType(Me(Me.tablePrecios.PorcentajeImpuestoColumn),Decimal)
            End Get
            Set
                Me(Me.tablePrecios.PorcentajeImpuestoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoMoneda() As String
            Get
                Return CType(Me(Me.tablePrecios.CodTipoMonedaColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.CodTipoMonedaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AplicaIva() As String
            Get
                Return CType(Me(Me.tablePrecios.AplicaIvaColumn),String)
            End Get
            Set
                Me(Me.tablePrecios.AplicaIvaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TieneContrato() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrecios.TieneContratoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TieneContrato' de la tabla 'Precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrecios.TieneContratoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablePrecios.EstadoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'Precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrecios.EstadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTieneContratoNull() As Boolean
            Return Me.IsNull(Me.tablePrecios.TieneContratoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTieneContratoNull()
            Me(Me.tablePrecios.TieneContratoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablePrecios.EstadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablePrecios.EstadoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class KardexCamionRow
        Inherits System.Data.DataRow
        
        Private tableKardexCamion As KardexCamionDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableKardexCamion = CType(Me.Table,KardexCamionDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableKardexCamion.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableKardexCamion.CodProductoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Existencias() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableKardexCamion.ExistenciasColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Existencias' de la tabla 'KardexCamion' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKardexCamion.ExistenciasColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdHojaRuta() As Integer
            Get
                Return CType(Me(Me.tableKardexCamion.IdHojaRutaColumn),Integer)
            End Get
            Set
                Me(Me.tableKardexCamion.IdHojaRutaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExistenciasNull() As Boolean
            Return Me.IsNull(Me.tableKardexCamion.ExistenciasColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExistenciasNull()
            Me(Me.tableKardexCamion.ExistenciasColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class ProductosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProductosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProductosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProductosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class PreciosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PreciosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PreciosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PreciosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class KardexCamionRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As KardexCamionRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As KardexCamionRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As KardexCamionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ProductosDataSetTableAdapters
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class ProductosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Productos"
            tableMapping.ColumnMappings.Add("Codigo", "Codigo")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("CoeficienteProducto", "CoeficienteProducto")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Iva", "Iva")
            tableMapping.ColumnMappings.Add("UnidadMedidaVenta", "UnidadMedidaVenta")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Productos] WHERE (([Codigo] = @p1))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Productos] ([Codigo], [Descripcion], [CoeficienteProducto], [Precio]"& _ 
                ", [Iva], [UnidadMedidaVenta]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.DbType = System.Data.DbType.[Single]
            param.IsNullable = true
            param.SourceColumn = "CoeficienteProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.[Single]
            param.IsNullable = true
            param.SourceColumn = "Precio"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.[Single]
            param.IsNullable = true
            param.SourceColumn = "Iva"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Productos] SET [Codigo] = @p1, [Descripcion] = @p2, [CoeficienteProducto]"& _ 
                " = @p3, [Precio] = @p4, [Iva] = @p5, [UnidadMedidaVenta] = @p6 WHERE (([Codigo] "& _ 
                "= @p7))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.DbType = System.Data.DbType.[Single]
            param.IsNullable = true
            param.SourceColumn = "CoeficienteProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.[Single]
            param.IsNullable = true
            param.SourceColumn = "Precio"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.[Single]
            param.IsNullable = true
            param.SourceColumn = "Iva"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Codigo], [Descripcion], [CoeficienteProducto], [Precio], [Iva], [UnidadMe"& _ 
                "didaVenta] FROM [Productos]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Codigo, Descripcion, CoeficienteProducto, Precio, Iva, UnidadMedidaVen"& _ 
                "ta"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Productos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Codigo = @CodProducto)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "Codigo"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductosDataSet.ProductosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductosDataSet.ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductosDataSet.ProductosDataTable = New ProductosDataSet.ProductosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As ProductosDataSet.ProductosDataTable, ByVal CodProducto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodProducto Is Nothing) Then
                Throw New System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodProducto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal CodProducto As String) As ProductosDataSet.ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodProducto Is Nothing) Then
                Throw New System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodProducto,String)
            End If
            Dim dataTable As ProductosDataSet.ProductosDataTable = New ProductosDataSet.ProductosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.ProductosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Productos")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As System.Nullable(Of Single), ByVal p4 As System.Nullable(Of Single), ByVal p5 As System.Nullable(Of Single), ByVal p6 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As System.Nullable(Of Single), ByVal p4 As System.Nullable(Of Single), ByVal p5 As System.Nullable(Of Single), ByVal p6 As String, ByVal p7 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class PreciosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Precios"
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("PrecioNeto", "PrecioNeto")
            tableMapping.ColumnMappings.Add("PorcentajeDescuento", "PorcentajeDescuento")
            tableMapping.ColumnMappings.Add("PorcentajeImpuesto", "PorcentajeImpuesto")
            tableMapping.ColumnMappings.Add("CodTipoMoneda", "CodTipoMoneda")
            tableMapping.ColumnMappings.Add("AplicaIva", "AplicaIva")
            tableMapping.ColumnMappings.Add("TieneContrato", "TieneContrato")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Precios] WHERE (([CodSucursal] = @p1) AND ([CodCliente] = @p2) AND ("& _ 
                "[CodProducto] = @p3))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Precios] ([CodSucursal], [CodCliente], [CodProducto], [PrecioNeto], "& _ 
                "[PorcentajeDescuento], [PorcentajeImpuesto], [CodTipoMoneda], [AplicaIva], [Tien"& _ 
                "eContrato], [Estado]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioNeto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeDescuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodTipoMoneda"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "AplicaIva"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "TieneContrato"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Estado"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Precios] SET [CodSucursal] = @p1, [CodCliente] = @p2, [CodProducto] = @p3"& _ 
                ", [PrecioNeto] = @p4, [PorcentajeDescuento] = @p5, [PorcentajeImpuesto] = @p6, ["& _ 
                "CodTipoMoneda] = @p7, [AplicaIva] = @p8, [TieneContrato] = @p9, [Estado] = @p10 "& _ 
                "WHERE (([CodSucursal] = @p11) AND ([CodCliente] = @p12) AND ([CodProducto] = @p1"& _ 
                "3))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioNeto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeDescuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "CodTipoMoneda"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "AplicaIva"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "TieneContrato"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "Estado"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [CodSucursal], [CodCliente], [CodProducto], [PrecioNeto], [PorcentajeDescu"& _ 
                "ento], [PorcentajeImpuesto], [CodTipoMoneda], [AplicaIva], [TieneContrato], [Est"& _ 
                "ado] FROM [Precios]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     CodSucursal, CodCliente, CodProducto, PrecioNeto, PorcentajeDescuento,"& _ 
                " PorcentajeImpuesto, CodTipoMoneda, AplicaIva, TieneContrato, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      Estado"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Precios"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CodSucursal = @CodSucursal) AND ("& _ 
                "CodCliente = @CodCliente) AND (CodProducto = @CodProducto)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodSucursal"
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._commandCollection(1).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._commandCollection(1).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductosDataSet.PreciosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductosDataSet.PreciosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductosDataSet.PreciosDataTable = New ProductosDataSet.PreciosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As ProductosDataSet.PreciosDataTable, ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodSucursal Is Nothing) Then
                Throw New System.ArgumentNullException("CodSucursal")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodSucursal,String)
            End If
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodCliente,String)
            End If
            If (CodProducto Is Nothing) Then
                Throw New System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodProducto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal CodSucursal As String, ByVal CodCliente As String, ByVal CodProducto As String) As ProductosDataSet.PreciosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CodSucursal Is Nothing) Then
                Throw New System.ArgumentNullException("CodSucursal")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodSucursal,String)
            End If
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodCliente,String)
            End If
            If (CodProducto Is Nothing) Then
                Throw New System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CodProducto,String)
            End If
            Dim dataTable As ProductosDataSet.PreciosDataTable = New ProductosDataSet.PreciosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.PreciosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Precios")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Decimal, ByVal p5 As Decimal, ByVal p6 As Decimal, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,Decimal)
            If (p7 Is Nothing) Then
                Throw New System.ArgumentNullException("p7")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New System.ArgumentNullException("p8")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As Decimal, ByVal p5 As Decimal, ByVal p6 As Decimal, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As String, ByVal p11 As String, ByVal p12 As String, ByVal p13 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,Decimal)
            If (p7 Is Nothing) Then
                Throw New System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Throw New System.ArgumentNullException("p11")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Throw New System.ArgumentNullException("p12")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Throw New System.ArgumentNullException("p13")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class KardexCamionTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        'manejo de transaccion en el tableAdapter
        'Private _Transaction As System.Data.SqlServerCe.SqlCeTransaction
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Transaccion() As System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return _adapter.SelectCommand.Transaction
            End Get
            Set(ByVal value As System.Data.SqlServerCe.SqlCeTransaction)
                If _adapter Is Nothing Then InitAdapter()
                For Each cmd As System.Data.SqlServerCe.SqlCeCommand In Me.CommandCollection
                    cmd.Transaction = value
                Next
                If Not _adapter.InsertCommand Is Nothing Then _
                    _adapter.InsertCommand.Transaction = value
                If Not _adapter.UpdateCommand Is Nothing Then _
                    _adapter.UpdateCommand.Transaction = value
                If Not _adapter.DeleteCommand Is Nothing Then _
                    _adapter.DeleteCommand.Transaction = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "KardexCamion"
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Existencias", "Existencias")
            tableMapping.ColumnMappings.Add("IdHojaRuta", "IdHojaRuta")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [KardexCamion] WHERE (([CodProducto] = @p1) AND ([IdHojaRuta] = @p2))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IdHojaRuta"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [KardexCamion] ([CodProducto], [Existencias], [IdHojaRuta]) VALUES (@"& _ 
                "p1, @p2, @p3)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Existencias"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IdHojaRuta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [KardexCamion] SET [CodProducto] = @p1, [Existencias] = @p2, [IdHojaRuta] "& _ 
                "= @p3 WHERE (([CodProducto] = @p4) AND ([IdHojaRuta] = @p5))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Existencias"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IdHojaRuta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.Int32
            param.IsNullable = true
            param.SourceColumn = "IdHojaRuta"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(1) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT CodProducto, Existencias, IdHojaRuta FROM KardexCamion"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(1) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CodProducto, Existencias, IdHojaRuta FROM KardexCamion WHERE (IdHojaRuta ="& _ 
                " @IdHojaRuta) AND (CodProducto = @CodProducto)"
            Me._commandCollection(1).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@IdHojaRuta"
            param.DbType = System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "IdHojaRuta"
            Me._commandCollection(1).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._commandCollection(1).Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProductosDataSet.KardexCamionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ProductosDataSet.KardexCamionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ProductosDataSet.KardexCamionDataTable = New ProductosDataSet.KardexCamionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As ProductosDataSet.KardexCamionDataTable, ByVal IdHojaRuta As Integer, ByVal CodProducto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IdHojaRuta,Integer)
            If (CodProducto Is Nothing) Then
                Throw New System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodProducto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal IdHojaRuta As Integer, ByVal CodProducto As String) As ProductosDataSet.KardexCamionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IdHojaRuta,Integer)
            If (CodProducto Is Nothing) Then
                Throw New System.ArgumentNullException("CodProducto")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodProducto,String)
            End If
            Dim dataTable As ProductosDataSet.KardexCamionDataTable = New ProductosDataSet.KardexCamionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ProductosDataSet.KardexCamionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ProductosDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "KardexCamion")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As Integer) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As System.Nullable(Of Decimal), ByVal p3 As Integer) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As System.Nullable(Of Decimal), ByVal p3 As Integer, ByVal p4 As String, ByVal p5 As Integer) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,Integer)
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace

Namespace ProductosDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace
