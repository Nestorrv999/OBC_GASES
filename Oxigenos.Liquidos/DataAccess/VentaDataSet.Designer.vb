'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.832
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data

'
'Microsoft.CompactFramework.Design.Data generó automáticamente este código fuente, versión=2.0.50727.832.
'

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("VentaDataSet")>  _
Partial Public Class VentaDataSet
    Inherits System.Data.DataSet
    
    Private tableDetalleFactura As DetalleFacturaDataTable
    
    Private tableMaestroFacturas As MaestroFacturasDataTable
    
    Private tableTanquesCliente As TanquesClienteDataTable
    
    Private tableAforos As AforosDataTable
    
    Private tablePrecintos As PrecintosDataTable
    
    Private tableDetallePedido As DetallePedidoDataTable
    
    Private relationTanquesCliente_DetallePedido As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetalleFactura() As DetalleFacturaDataTable
        Get
            Return Me.tableDetalleFactura
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property MaestroFacturas() As MaestroFacturasDataTable
        Get
            Return Me.tableMaestroFacturas
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property TanquesCliente() As TanquesClienteDataTable
        Get
            Return Me.tableTanquesCliente
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Aforos() As AforosDataTable
        Get
            Return Me.tableAforos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property Precintos() As PrecintosDataTable
        Get
            Return Me.tablePrecintos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public ReadOnly Property DetallePedido() As DetallePedidoDataTable
        Get
            Return Me.tableDetallePedido
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As VentaDataSet = CType(MyBase.Clone,VentaDataSet)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DetalleFactura")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleFacturaDataTable(ds.Tables("DetalleFactura")))
            End If
            If (Not (ds.Tables("MaestroFacturas")) Is Nothing) Then
                MyBase.Tables.Add(New MaestroFacturasDataTable(ds.Tables("MaestroFacturas")))
            End If
            If (Not (ds.Tables("TanquesCliente")) Is Nothing) Then
                MyBase.Tables.Add(New TanquesClienteDataTable(ds.Tables("TanquesCliente")))
            End If
            If (Not (ds.Tables("Aforos")) Is Nothing) Then
                MyBase.Tables.Add(New AforosDataTable(ds.Tables("Aforos")))
            End If
            If (Not (ds.Tables("Precintos")) Is Nothing) Then
                MyBase.Tables.Add(New PrecintosDataTable(ds.Tables("Precintos")))
            End If
            If (Not (ds.Tables("DetallePedido")) Is Nothing) Then
                MyBase.Tables.Add(New DetallePedidoDataTable(ds.Tables("DetallePedido")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDetalleFactura = CType(MyBase.Tables("DetalleFactura"),DetalleFacturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleFactura) Is Nothing) Then
                Me.tableDetalleFactura.InitVars
            End If
        End If
        Me.tableMaestroFacturas = CType(MyBase.Tables("MaestroFacturas"),MaestroFacturasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMaestroFacturas) Is Nothing) Then
                Me.tableMaestroFacturas.InitVars
            End If
        End If
        Me.tableTanquesCliente = CType(MyBase.Tables("TanquesCliente"),TanquesClienteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTanquesCliente) Is Nothing) Then
                Me.tableTanquesCliente.InitVars
            End If
        End If
        Me.tableAforos = CType(MyBase.Tables("Aforos"),AforosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAforos) Is Nothing) Then
                Me.tableAforos.InitVars
            End If
        End If
        Me.tablePrecintos = CType(MyBase.Tables("Precintos"),PrecintosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePrecintos) Is Nothing) Then
                Me.tablePrecintos.InitVars
            End If
        End If
        Me.tableDetallePedido = CType(MyBase.Tables("DetallePedido"),DetallePedidoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetallePedido) Is Nothing) Then
                Me.tableDetallePedido.InitVars
            End If
        End If
        Me.relationTanquesCliente_DetallePedido = Me.Relations("TanquesCliente_DetallePedido")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "VentaDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/VentaDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDetalleFactura = New DetalleFacturaDataTable
        MyBase.Tables.Add(Me.tableDetalleFactura)
        Me.tableMaestroFacturas = New MaestroFacturasDataTable
        MyBase.Tables.Add(Me.tableMaestroFacturas)
        Me.tableTanquesCliente = New TanquesClienteDataTable
        MyBase.Tables.Add(Me.tableTanquesCliente)
        Me.tableAforos = New AforosDataTable
        MyBase.Tables.Add(Me.tableAforos)
        Me.tablePrecintos = New PrecintosDataTable
        MyBase.Tables.Add(Me.tablePrecintos)
        Me.tableDetallePedido = New DetallePedidoDataTable(false)
        MyBase.Tables.Add(Me.tableDetallePedido)
        Me.relationTanquesCliente_DetallePedido = New System.Data.DataRelation("TanquesCliente_DetallePedido", New System.Data.DataColumn() {Me.tableTanquesCliente.NoTanqueColumn}, New System.Data.DataColumn() {Me.tableDetallePedido.CodTanqueColumn}, false)
        Me.Relations.Add(Me.relationTanquesCliente_DetallePedido)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleFactura() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMaestroFacturas() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTanquesCliente() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAforos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePrecintos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetallePedido() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As VentaDataSet = New VentaDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.DetallePedido.TanqueColumn.Expression = "Parent.Descripcion"
    End Sub
    
    Public Delegate Sub DetalleFacturaRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleFacturaRowChangeEvent)
    
    Public Delegate Sub MaestroFacturasRowChangeEventHandler(ByVal sender As Object, ByVal e As MaestroFacturasRowChangeEvent)
    
    Public Delegate Sub TanquesClienteRowChangeEventHandler(ByVal sender As Object, ByVal e As TanquesClienteRowChangeEvent)
    
    Public Delegate Sub AforosRowChangeEventHandler(ByVal sender As Object, ByVal e As AforosRowChangeEvent)
    
    Public Delegate Sub PrecintosRowChangeEventHandler(ByVal sender As Object, ByVal e As PrecintosRowChangeEvent)
    
    Public Delegate Sub DetallePedidoRowChangeEventHandler(ByVal sender As Object, ByVal e As DetallePedidoRowChangeEvent)
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleFacturaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTipoFactura As System.Data.DataColumn
        
        Private columnNoFactura As System.Data.DataColumn
        
        Private columnPrefijo As System.Data.DataColumn
        
        Private columnCodProducto As System.Data.DataColumn
        
        Private columnCapacidad As System.Data.DataColumn
        
        Private columnPertenencia As System.Data.DataColumn
        
        Private columnUnidadMedidaReal As System.Data.DataColumn
        
        Private columnUnidadMedidaVenta As System.Data.DataColumn
        
        Private columnCantidad As System.Data.DataColumn
        
        Private columnPrecioUnitario As System.Data.DataColumn
        
        Private columnMontoFlete As System.Data.DataColumn
        
        Private columnMontoDescuento As System.Data.DataColumn
        
        Private columnMontoImpuesto As System.Data.DataColumn
        
        Private columnMontoTotalItem As System.Data.DataColumn
        
        Private columnDescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleFactura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipoFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PertenenciaColumn() As System.Data.DataColumn
            Get
                Return Me.columnPertenencia
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaRealColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnidadMedidaReal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadMedidaVentaColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnidadMedidaVenta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoFleteColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoFlete
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDescuentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoDescuento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoImpuestoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoImpuesto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalItemColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoTotalItem
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleFacturaRow
            Get
                Return CType(Me.Rows(index),DetalleFacturaRow)
            End Get
        End Property
        
        Public Event DetalleFacturaRowChanging As DetalleFacturaRowChangeEventHandler
        
        Public Event DetalleFacturaRowChanged As DetalleFacturaRowChangeEventHandler
        
        Public Event DetalleFacturaRowDeleting As DetalleFacturaRowChangeEventHandler
        
        Public Event DetalleFacturaRowDeleted As DetalleFacturaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleFacturaRow(ByVal row As DetalleFacturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleFacturaRow(ByVal TipoFactura As String, ByVal NoFactura As String, ByVal Prefijo As String, ByVal CodProducto As String, ByVal Capacidad As String, ByVal Pertenencia As String, ByVal UnidadMedidaReal As String, ByVal UnidadMedidaVenta As String, ByVal Cantidad As Decimal, ByVal PrecioUnitario As Decimal, ByVal MontoFlete As Decimal, ByVal MontoDescuento As Decimal, ByVal MontoImpuesto As Decimal, ByVal MontoTotalItem As Decimal, ByVal Descripcion As String) As DetalleFacturaRow
            Dim rowDetalleFacturaRow As DetalleFacturaRow = CType(Me.NewRow,DetalleFacturaRow)
            rowDetalleFacturaRow.ItemArray = New Object() {TipoFactura, NoFactura, Prefijo, CodProducto, Capacidad, Pertenencia, UnidadMedidaReal, UnidadMedidaVenta, Cantidad, PrecioUnitario, MontoFlete, MontoDescuento, MontoImpuesto, MontoTotalItem, Descripcion}
            Me.Rows.Add(rowDetalleFacturaRow)
            Return rowDetalleFacturaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoFacturaNoFacturaPrefijoCodProducto(ByVal TipoFactura As String, ByVal NoFactura As String, ByVal Prefijo As String, ByVal CodProducto As String) As DetalleFacturaRow
            Return CType(Me.Rows.Find(New Object() {TipoFactura, NoFactura, Prefijo, CodProducto}),DetalleFacturaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DetalleFacturaDataTable = CType(MyBase.Clone,DetalleFacturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DetalleFacturaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoFactura = MyBase.Columns("TipoFactura")
            Me.columnNoFactura = MyBase.Columns("NoFactura")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnPertenencia = MyBase.Columns("Pertenencia")
            Me.columnUnidadMedidaReal = MyBase.Columns("UnidadMedidaReal")
            Me.columnUnidadMedidaVenta = MyBase.Columns("UnidadMedidaVenta")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnMontoFlete = MyBase.Columns("MontoFlete")
            Me.columnMontoDescuento = MyBase.Columns("MontoDescuento")
            Me.columnMontoImpuesto = MyBase.Columns("MontoImpuesto")
            Me.columnMontoTotalItem = MyBase.Columns("MontoTotalItem")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoFactura = New System.Data.DataColumn("TipoFactura", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoFactura)
            Me.columnNoFactura = New System.Data.DataColumn("NoFactura", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoFactura)
            Me.columnPrefijo = New System.Data.DataColumn("Prefijo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnCodProducto = New System.Data.DataColumn("CodProducto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnCapacidad = New System.Data.DataColumn("Capacidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnPertenencia = New System.Data.DataColumn("Pertenencia", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPertenencia)
            Me.columnUnidadMedidaReal = New System.Data.DataColumn("UnidadMedidaReal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedidaReal)
            Me.columnUnidadMedidaVenta = New System.Data.DataColumn("UnidadMedidaVenta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidadMedidaVenta)
            Me.columnCantidad = New System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecioUnitario = New System.Data.DataColumn("PrecioUnitario", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnMontoFlete = New System.Data.DataColumn("MontoFlete", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoFlete)
            Me.columnMontoDescuento = New System.Data.DataColumn("MontoDescuento", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDescuento)
            Me.columnMontoImpuesto = New System.Data.DataColumn("MontoImpuesto", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoImpuesto)
            Me.columnMontoTotalItem = New System.Data.DataColumn("MontoTotalItem", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotalItem)
            Me.columnDescripcion = New System.Data.DataColumn("Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTipoFactura, Me.columnNoFactura, Me.columnPrefijo, Me.columnCodProducto}, true))
            Me.columnTipoFactura.AllowDBNull = false
            Me.columnTipoFactura.MaxLength = 1
            Me.columnNoFactura.AllowDBNull = false
            Me.columnNoFactura.MaxLength = 8
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnCapacidad.MaxLength = 100
            Me.columnPertenencia.MaxLength = 100
            Me.columnUnidadMedidaReal.MaxLength = 100
            Me.columnUnidadMedidaVenta.MaxLength = 100
            Me.columnDescripcion.MaxLength = 100
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleFacturaRow() As DetalleFacturaRow
            Return CType(Me.NewRow,DetalleFacturaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DetalleFacturaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetalleFacturaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleFacturaRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowChanged(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleFacturaRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowChanging(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleFacturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowDeleted(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleFacturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleFacturaRowDeleting(Me, New DetalleFacturaRowChangeEvent(CType(e.Row,DetalleFacturaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleFacturaRow(ByVal row As DetalleFacturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleFacturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MaestroFacturasDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTipoFactura As System.Data.DataColumn
        
        Private columnNoFactura As System.Data.DataColumn
        
        Private columnPrefijo As System.Data.DataColumn
        
        Private columnCodSucursal As System.Data.DataColumn
        
        Private columnCodCliente As System.Data.DataColumn
        
        Private columnFecha As System.Data.DataColumn
        
        Private columnMoneda As System.Data.DataColumn
        
        Private columnExcepcion As System.Data.DataColumn
        
        Private columnCodRuta As System.Data.DataColumn
        
        Private columnCodTransportadora As System.Data.DataColumn
        
        Private columnCodChofer As System.Data.DataColumn
        
        Private columnCodVehiculo As System.Data.DataColumn
        
        Private columnNoViaje As System.Data.DataColumn
        
        Private columnCodTipoPago As System.Data.DataColumn
        
        Private columnNoDiasCredito As System.Data.DataColumn
        
        Private columnOrdenCompra As System.Data.DataColumn
        
        Private columnMontoFactura As System.Data.DataColumn
        
        Private columnMontoFlete As System.Data.DataColumn
        
        Private columnDescuento As System.Data.DataColumn
        
        Private columnImpuestoTotal As System.Data.DataColumn
        
        Private columnCodEntidad As System.Data.DataColumn
        
        Private columnNoPedido As System.Data.DataColumn
        
        Private columnEstadoFactura As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MaestroFacturas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipoFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrefijoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrefijo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodSucursalColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodSucursal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodClienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodCliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExcepcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnExcepcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodRutaColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodRuta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTransportadoraColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTransportadora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodChoferColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodChofer
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodVehiculoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodVehiculo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoViajeColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoViaje
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTipoPagoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTipoPago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoDiasCreditoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoDiasCredito
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdenCompraColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrdenCompra
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoFleteColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoFlete
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoTotalColumn() As System.Data.DataColumn
            Get
                Return Me.columnImpuestoTotal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodEntidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodEntidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPedidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoPedido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnEstadoFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MaestroFacturasRow
            Get
                Return CType(Me.Rows(index),MaestroFacturasRow)
            End Get
        End Property
        
        Public Event MaestroFacturasRowChanging As MaestroFacturasRowChangeEventHandler
        
        Public Event MaestroFacturasRowChanged As MaestroFacturasRowChangeEventHandler
        
        Public Event MaestroFacturasRowDeleting As MaestroFacturasRowChangeEventHandler
        
        Public Event MaestroFacturasRowDeleted As MaestroFacturasRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMaestroFacturasRow(ByVal row As MaestroFacturasRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMaestroFacturasRow( _
                    ByVal TipoFactura As String,  _
                    ByVal NoFactura As String,  _
                    ByVal Prefijo As String,  _
                    ByVal CodSucursal As String,  _
                    ByVal CodCliente As String,  _
                    ByVal Fecha As Date,  _
                    ByVal Moneda As String,  _
                    ByVal Excepcion As String,  _
                    ByVal CodRuta As String,  _
                    ByVal CodTransportadora As String,  _
                    ByVal CodChofer As String,  _
                    ByVal CodVehiculo As String,  _
                    ByVal NoViaje As String,  _
                    ByVal CodTipoPago As String,  _
                    ByVal NoDiasCredito As Short,  _
                    ByVal OrdenCompra As String,  _
                    ByVal MontoFactura As Decimal,  _
                    ByVal MontoFlete As Decimal,  _
                    ByVal Descuento As Decimal,  _
                    ByVal ImpuestoTotal As Decimal,  _
                    ByVal CodEntidad As String,  _
                    ByVal NoPedido As String,  _
                    ByVal EstadoFactura As String) As MaestroFacturasRow
            Dim rowMaestroFacturasRow As MaestroFacturasRow = CType(Me.NewRow,MaestroFacturasRow)
            rowMaestroFacturasRow.ItemArray = New Object() {TipoFactura, NoFactura, Prefijo, CodSucursal, CodCliente, Fecha, Moneda, Excepcion, CodRuta, CodTransportadora, CodChofer, CodVehiculo, NoViaje, CodTipoPago, NoDiasCredito, OrdenCompra, MontoFactura, MontoFlete, Descuento, ImpuestoTotal, CodEntidad, NoPedido, EstadoFactura}
            Me.Rows.Add(rowMaestroFacturasRow)
            Return rowMaestroFacturasRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTipoFacturaNoFacturaPrefijo(ByVal TipoFactura As String, ByVal NoFactura As String, ByVal Prefijo As String) As MaestroFacturasRow
            Return CType(Me.Rows.Find(New Object() {TipoFactura, NoFactura, Prefijo}),MaestroFacturasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MaestroFacturasDataTable = CType(MyBase.Clone,MaestroFacturasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MaestroFacturasDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoFactura = MyBase.Columns("TipoFactura")
            Me.columnNoFactura = MyBase.Columns("NoFactura")
            Me.columnPrefijo = MyBase.Columns("Prefijo")
            Me.columnCodSucursal = MyBase.Columns("CodSucursal")
            Me.columnCodCliente = MyBase.Columns("CodCliente")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnMoneda = MyBase.Columns("Moneda")
            Me.columnExcepcion = MyBase.Columns("Excepcion")
            Me.columnCodRuta = MyBase.Columns("CodRuta")
            Me.columnCodTransportadora = MyBase.Columns("CodTransportadora")
            Me.columnCodChofer = MyBase.Columns("CodChofer")
            Me.columnCodVehiculo = MyBase.Columns("CodVehiculo")
            Me.columnNoViaje = MyBase.Columns("NoViaje")
            Me.columnCodTipoPago = MyBase.Columns("CodTipoPago")
            Me.columnNoDiasCredito = MyBase.Columns("NoDiasCredito")
            Me.columnOrdenCompra = MyBase.Columns("OrdenCompra")
            Me.columnMontoFactura = MyBase.Columns("MontoFactura")
            Me.columnMontoFlete = MyBase.Columns("MontoFlete")
            Me.columnDescuento = MyBase.Columns("Descuento")
            Me.columnImpuestoTotal = MyBase.Columns("ImpuestoTotal")
            Me.columnCodEntidad = MyBase.Columns("CodEntidad")
            Me.columnNoPedido = MyBase.Columns("NoPedido")
            Me.columnEstadoFactura = MyBase.Columns("EstadoFactura")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoFactura = New System.Data.DataColumn("TipoFactura", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoFactura)
            Me.columnNoFactura = New System.Data.DataColumn("NoFactura", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoFactura)
            Me.columnPrefijo = New System.Data.DataColumn("Prefijo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrefijo)
            Me.columnCodSucursal = New System.Data.DataColumn("CodSucursal", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodSucursal)
            Me.columnCodCliente = New System.Data.DataColumn("CodCliente", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodCliente)
            Me.columnFecha = New System.Data.DataColumn("Fecha", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnMoneda = New System.Data.DataColumn("Moneda", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.columnExcepcion = New System.Data.DataColumn("Excepcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExcepcion)
            Me.columnCodRuta = New System.Data.DataColumn("CodRuta", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodRuta)
            Me.columnCodTransportadora = New System.Data.DataColumn("CodTransportadora", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTransportadora)
            Me.columnCodChofer = New System.Data.DataColumn("CodChofer", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodChofer)
            Me.columnCodVehiculo = New System.Data.DataColumn("CodVehiculo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodVehiculo)
            Me.columnNoViaje = New System.Data.DataColumn("NoViaje", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoViaje)
            Me.columnCodTipoPago = New System.Data.DataColumn("CodTipoPago", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTipoPago)
            Me.columnNoDiasCredito = New System.Data.DataColumn("NoDiasCredito", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoDiasCredito)
            Me.columnOrdenCompra = New System.Data.DataColumn("OrdenCompra", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdenCompra)
            Me.columnMontoFactura = New System.Data.DataColumn("MontoFactura", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoFactura)
            Me.columnMontoFlete = New System.Data.DataColumn("MontoFlete", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoFlete)
            Me.columnDescuento = New System.Data.DataColumn("Descuento", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuento)
            Me.columnImpuestoTotal = New System.Data.DataColumn("ImpuestoTotal", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoTotal)
            Me.columnCodEntidad = New System.Data.DataColumn("CodEntidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodEntidad)
            Me.columnNoPedido = New System.Data.DataColumn("NoPedido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPedido)
            Me.columnEstadoFactura = New System.Data.DataColumn("EstadoFactura", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstadoFactura)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTipoFactura, Me.columnNoFactura, Me.columnPrefijo}, true))
            Me.columnTipoFactura.AllowDBNull = false
            Me.columnTipoFactura.MaxLength = 1
            Me.columnNoFactura.AllowDBNull = false
            Me.columnNoFactura.MaxLength = 8
            Me.columnPrefijo.AllowDBNull = false
            Me.columnPrefijo.MaxLength = 5
            Me.columnCodSucursal.MaxLength = 2
            Me.columnCodCliente.MaxLength = 8
            Me.columnMoneda.MaxLength = 2
            Me.columnExcepcion.MaxLength = 5
            Me.columnCodRuta.MaxLength = 10
            Me.columnCodTransportadora.MaxLength = 30
            Me.columnCodChofer.MaxLength = 15
            Me.columnCodVehiculo.MaxLength = 8
            Me.columnNoViaje.MaxLength = 1
            Me.columnCodTipoPago.MaxLength = 2
            Me.columnOrdenCompra.MaxLength = 15
            Me.columnCodEntidad.MaxLength = 8
            Me.columnNoPedido.MaxLength = 10
            Me.columnEstadoFactura.MaxLength = 1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMaestroFacturasRow() As MaestroFacturasRow
            Return CType(Me.NewRow,MaestroFacturasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MaestroFacturasRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MaestroFacturasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MaestroFacturasRowChangedEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowChanged(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MaestroFacturasRowChangingEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowChanging(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MaestroFacturasRowDeletedEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowDeleted(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MaestroFacturasRowDeletingEvent) Is Nothing) Then
                RaiseEvent MaestroFacturasRowDeleting(Me, New MaestroFacturasRowChangeEvent(CType(e.Row,MaestroFacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMaestroFacturasRow(ByVal row As MaestroFacturasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MaestroFacturasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TanquesClienteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNoTanque As System.Data.DataColumn
        
        Private columnDescripcion As System.Data.DataColumn
        
        Private columnCapacidad As System.Data.DataColumn
        
        Private columnIdFabricante As System.Data.DataColumn
        
        Private columnIdGrupoRecipiente As System.Data.DataColumn
        
        Private columnIdFamilia As System.Data.DataColumn
        
        Private columnIdTipo As System.Data.DataColumn
        
        Private columnProductoTanque As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TanquesCliente"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoTanqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoTanque
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CapacidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCapacidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdFabricanteColumn() As System.Data.DataColumn
            Get
                Return Me.columnIdFabricante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdGrupoRecipienteColumn() As System.Data.DataColumn
            Get
                Return Me.columnIdGrupoRecipiente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdFamiliaColumn() As System.Data.DataColumn
            Get
                Return Me.columnIdFamilia
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdTipoColumn() As System.Data.DataColumn
            Get
                Return Me.columnIdTipo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductoTanqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductoTanque
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TanquesClienteRow
            Get
                Return CType(Me.Rows(index),TanquesClienteRow)
            End Get
        End Property
        
        Public Event TanquesClienteRowChanging As TanquesClienteRowChangeEventHandler
        
        Public Event TanquesClienteRowChanged As TanquesClienteRowChangeEventHandler
        
        Public Event TanquesClienteRowDeleting As TanquesClienteRowChangeEventHandler
        
        Public Event TanquesClienteRowDeleted As TanquesClienteRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTanquesClienteRow(ByVal row As TanquesClienteRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTanquesClienteRow(ByVal NoTanque As String, ByVal Descripcion As String, ByVal Capacidad As Integer, ByVal IdFabricante As Short, ByVal IdGrupoRecipiente As Short, ByVal IdFamilia As Short, ByVal IdTipo As Short, ByVal ProductoTanque As String) As TanquesClienteRow
            Dim rowTanquesClienteRow As TanquesClienteRow = CType(Me.NewRow,TanquesClienteRow)
            rowTanquesClienteRow.ItemArray = New Object() {NoTanque, Descripcion, Capacidad, IdFabricante, IdGrupoRecipiente, IdFamilia, IdTipo, ProductoTanque}
            Me.Rows.Add(rowTanquesClienteRow)
            Return rowTanquesClienteRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoTanque(ByVal NoTanque As String) As TanquesClienteRow
            Return CType(Me.Rows.Find(New Object() {NoTanque}),TanquesClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TanquesClienteDataTable = CType(MyBase.Clone,TanquesClienteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TanquesClienteDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoTanque = MyBase.Columns("NoTanque")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnCapacidad = MyBase.Columns("Capacidad")
            Me.columnIdFabricante = MyBase.Columns("IdFabricante")
            Me.columnIdGrupoRecipiente = MyBase.Columns("IdGrupoRecipiente")
            Me.columnIdFamilia = MyBase.Columns("IdFamilia")
            Me.columnIdTipo = MyBase.Columns("IdTipo")
            Me.columnProductoTanque = MyBase.Columns("ProductoTanque")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoTanque = New System.Data.DataColumn("NoTanque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoTanque)
            Me.columnDescripcion = New System.Data.DataColumn("Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnCapacidad = New System.Data.DataColumn("Capacidad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCapacidad)
            Me.columnIdFabricante = New System.Data.DataColumn("IdFabricante", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdFabricante)
            Me.columnIdGrupoRecipiente = New System.Data.DataColumn("IdGrupoRecipiente", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdGrupoRecipiente)
            Me.columnIdFamilia = New System.Data.DataColumn("IdFamilia", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdFamilia)
            Me.columnIdTipo = New System.Data.DataColumn("IdTipo", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdTipo)
            Me.columnProductoTanque = New System.Data.DataColumn("ProductoTanque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductoTanque)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnNoTanque}, true))
            Me.columnNoTanque.AllowDBNull = false
            Me.columnNoTanque.ReadOnly = true
            Me.columnNoTanque.Unique = true
            Me.columnNoTanque.MaxLength = 15
            Me.columnDescripcion.ReadOnly = true
            Me.columnDescripcion.MaxLength = 30
            Me.columnCapacidad.ReadOnly = true
            Me.columnIdFabricante.ReadOnly = true
            Me.columnIdGrupoRecipiente.ReadOnly = true
            Me.columnIdFamilia.ReadOnly = true
            Me.columnIdTipo.ReadOnly = true
            Me.columnProductoTanque.ReadOnly = true
            Me.columnProductoTanque.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTanquesClienteRow() As TanquesClienteRow
            Return CType(Me.NewRow,TanquesClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TanquesClienteRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TanquesClienteRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TanquesClienteRowChangedEvent) Is Nothing) Then
                RaiseEvent TanquesClienteRowChanged(Me, New TanquesClienteRowChangeEvent(CType(e.Row,TanquesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TanquesClienteRowChangingEvent) Is Nothing) Then
                RaiseEvent TanquesClienteRowChanging(Me, New TanquesClienteRowChangeEvent(CType(e.Row,TanquesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TanquesClienteRowDeletedEvent) Is Nothing) Then
                RaiseEvent TanquesClienteRowDeleted(Me, New TanquesClienteRowChangeEvent(CType(e.Row,TanquesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TanquesClienteRowDeletingEvent) Is Nothing) Then
                RaiseEvent TanquesClienteRowDeleting(Me, New TanquesClienteRowChangeEvent(CType(e.Row,TanquesClienteRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTanquesClienteRow(ByVal row As TanquesClienteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TanquesClienteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AforosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNivel As System.Data.DataColumn
        
        Private columnCantidad As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Aforos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NivelColumn() As System.Data.DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AforosRow
            Get
                Return CType(Me.Rows(index),AforosRow)
            End Get
        End Property
        
        Public Event AforosRowChanging As AforosRowChangeEventHandler
        
        Public Event AforosRowChanged As AforosRowChangeEventHandler
        
        Public Event AforosRowDeleting As AforosRowChangeEventHandler
        
        Public Event AforosRowDeleted As AforosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAforosRow(ByVal row As AforosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAforosRow(ByVal Nivel As Short, ByVal Cantidad As Integer) As AforosRow
            Dim rowAforosRow As AforosRow = CType(Me.NewRow,AforosRow)
            rowAforosRow.ItemArray = New Object() {Nivel, Cantidad}
            Me.Rows.Add(rowAforosRow)
            Return rowAforosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNivel(ByVal Nivel As Short) As AforosRow
            Return CType(Me.Rows.Find(New Object() {Nivel}),AforosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AforosDataTable = CType(MyBase.Clone,AforosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AforosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNivel = MyBase.Columns("Nivel")
            Me.columnCantidad = MyBase.Columns("Cantidad")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNivel = New System.Data.DataColumn("Nivel", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNivel)
            Me.columnCantidad = New System.Data.DataColumn("Cantidad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnNivel}, true))
            Me.columnNivel.AllowDBNull = false
            Me.columnNivel.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAforosRow() As AforosRow
            Return CType(Me.NewRow,AforosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AforosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AforosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AforosRowChangedEvent) Is Nothing) Then
                RaiseEvent AforosRowChanged(Me, New AforosRowChangeEvent(CType(e.Row,AforosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AforosRowChangingEvent) Is Nothing) Then
                RaiseEvent AforosRowChanging(Me, New AforosRowChangeEvent(CType(e.Row,AforosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AforosRowDeletedEvent) Is Nothing) Then
                RaiseEvent AforosRowDeleted(Me, New AforosRowChangeEvent(CType(e.Row,AforosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AforosRowDeletingEvent) Is Nothing) Then
                RaiseEvent AforosRowDeleting(Me, New AforosRowChangeEvent(CType(e.Row,AforosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAforosRow(ByVal row As AforosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AforosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PrecintosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNoPedido As System.Data.DataColumn
        
        Private columnCodTanque As System.Data.DataColumn
        
        Private columnPrecinto As System.Data.DataColumn
        
        Private columnTipo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Precintos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPedidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoPedido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTanqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTanque
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecintoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrecinto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PrecintosRow
            Get
                Return CType(Me.Rows(index),PrecintosRow)
            End Get
        End Property
        
        Public Event PrecintosRowChanging As PrecintosRowChangeEventHandler
        
        Public Event PrecintosRowChanged As PrecintosRowChangeEventHandler
        
        Public Event PrecintosRowDeleting As PrecintosRowChangeEventHandler
        
        Public Event PrecintosRowDeleted As PrecintosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPrecintosRow(ByVal row As PrecintosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPrecintosRow(ByVal NoPedido As String, ByVal CodTanque As String, ByVal Precinto As String, ByVal Tipo As String) As PrecintosRow
            Dim rowPrecintosRow As PrecintosRow = CType(Me.NewRow,PrecintosRow)
            rowPrecintosRow.ItemArray = New Object() {NoPedido, CodTanque, Precinto, Tipo}
            Me.Rows.Add(rowPrecintosRow)
            Return rowPrecintosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoPedidoCodTanquePrecintoTipo(ByVal NoPedido As String, ByVal CodTanque As String, ByVal Precinto As String, ByVal Tipo As String) As PrecintosRow
            Return CType(Me.Rows.Find(New Object() {NoPedido, CodTanque, Precinto, Tipo}),PrecintosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PrecintosDataTable = CType(MyBase.Clone,PrecintosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PrecintosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoPedido = MyBase.Columns("NoPedido")
            Me.columnCodTanque = MyBase.Columns("CodTanque")
            Me.columnPrecinto = MyBase.Columns("Precinto")
            Me.columnTipo = MyBase.Columns("Tipo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoPedido = New System.Data.DataColumn("NoPedido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPedido)
            Me.columnCodTanque = New System.Data.DataColumn("CodTanque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTanque)
            Me.columnPrecinto = New System.Data.DataColumn("Precinto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecinto)
            Me.columnTipo = New System.Data.DataColumn("Tipo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnNoPedido, Me.columnCodTanque, Me.columnPrecinto, Me.columnTipo}, true))
            Me.columnNoPedido.AllowDBNull = false
            Me.columnNoPedido.MaxLength = 8
            Me.columnCodTanque.AllowDBNull = false
            Me.columnCodTanque.MaxLength = 15
            Me.columnPrecinto.AllowDBNull = false
            Me.columnPrecinto.MaxLength = 10
            Me.columnTipo.AllowDBNull = false
            Me.columnTipo.MaxLength = 1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPrecintosRow() As PrecintosRow
            Return CType(Me.NewRow,PrecintosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PrecintosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PrecintosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PrecintosRowChangedEvent) Is Nothing) Then
                RaiseEvent PrecintosRowChanged(Me, New PrecintosRowChangeEvent(CType(e.Row,PrecintosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PrecintosRowChangingEvent) Is Nothing) Then
                RaiseEvent PrecintosRowChanging(Me, New PrecintosRowChangeEvent(CType(e.Row,PrecintosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PrecintosRowDeletedEvent) Is Nothing) Then
                RaiseEvent PrecintosRowDeleted(Me, New PrecintosRowChangeEvent(CType(e.Row,PrecintosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PrecintosRowDeletingEvent) Is Nothing) Then
                RaiseEvent PrecintosRowDeleting(Me, New PrecintosRowChangeEvent(CType(e.Row,PrecintosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePrecintosRow(ByVal row As PrecintosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PrecintosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetallePedidoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNoPedido As System.Data.DataColumn
        
        Private columnCodProducto As System.Data.DataColumn
        
        Private columnMetodoEntrega As System.Data.DataColumn
        
        Private columnPresionInicial As System.Data.DataColumn
        
        Private columnPresionFinal As System.Data.DataColumn
        
        Private columnNivelInicial As System.Data.DataColumn
        
        Private columnNivelFinal As System.Data.DataColumn
        
        Private columnPesoInicial As System.Data.DataColumn
        
        Private columnPesoFinal As System.Data.DataColumn
        
        Private columnCantidad As System.Data.DataColumn
        
        Private columnPrecioUnitario As System.Data.DataColumn
        
        Private columnPrecioTotal As System.Data.DataColumn
        
        Private columnPocentajeDescuento As System.Data.DataColumn
        
        Private columnPorcentajeImpuesto As System.Data.DataColumn
        
        Private columnMontoDescuento As System.Data.DataColumn
        
        Private columnMontoImpuesto As System.Data.DataColumn
        
        Private columnCodTanque As System.Data.DataColumn
        
        Private columnKilometraje As System.Data.DataColumn
        
        Private columnTanque As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "DetallePedido"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoPedidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnNoPedido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodProductoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodProducto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MetodoEntregaColumn() As System.Data.DataColumn
            Get
                Return Me.columnMetodoEntrega
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresionInicialColumn() As System.Data.DataColumn
            Get
                Return Me.columnPresionInicial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PresionFinalColumn() As System.Data.DataColumn
            Get
                Return Me.columnPresionFinal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NivelInicialColumn() As System.Data.DataColumn
            Get
                Return Me.columnNivelInicial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NivelFinalColumn() As System.Data.DataColumn
            Get
                Return Me.columnNivelFinal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PesoInicialColumn() As System.Data.DataColumn
            Get
                Return Me.columnPesoInicial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PesoFinalColumn() As System.Data.DataColumn
            Get
                Return Me.columnPesoFinal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioUnitarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrecioUnitario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioTotalColumn() As System.Data.DataColumn
            Get
                Return Me.columnPrecioTotal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PocentajeDescuentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPocentajeDescuento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeImpuestoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPorcentajeImpuesto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoDescuentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoDescuento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoImpuestoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMontoImpuesto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodTanqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodTanque
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KilometrajeColumn() As System.Data.DataColumn
            Get
                Return Me.columnKilometraje
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TanqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnTanque
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetallePedidoRow
            Get
                Return CType(Me.Rows(index),DetallePedidoRow)
            End Get
        End Property
        
        Public Event DetallePedidoRowChanging As DetallePedidoRowChangeEventHandler
        
        Public Event DetallePedidoRowChanged As DetallePedidoRowChangeEventHandler
        
        Public Event DetallePedidoRowDeleting As DetallePedidoRowChangeEventHandler
        
        Public Event DetallePedidoRowDeleted As DetallePedidoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetallePedidoRow(ByVal row As DetallePedidoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetallePedidoRow( _
                    ByVal NoPedido As String,  _
                    ByVal CodProducto As String,  _
                    ByVal MetodoEntrega As String,  _
                    ByVal PresionInicial As Decimal,  _
                    ByVal PresionFinal As Decimal,  _
                    ByVal NivelInicial As Short,  _
                    ByVal NivelFinal As Short,  _
                    ByVal PesoInicial As Decimal,  _
                    ByVal PesoFinal As Decimal,  _
                    ByVal Cantidad As Decimal,  _
                    ByVal PrecioUnitario As Decimal,  _
                    ByVal PrecioTotal As Decimal,  _
                    ByVal PocentajeDescuento As Double,  _
                    ByVal PorcentajeImpuesto As Double,  _
                    ByVal MontoDescuento As Decimal,  _
                    ByVal MontoImpuesto As Decimal,  _
                    ByVal parentTanquesClienteRowByTanquesCliente_DetallePedido As TanquesClienteRow,  _
                    ByVal Kilometraje As String,  _
                    ByVal Tanque As String) As DetallePedidoRow
            Dim rowDetallePedidoRow As DetallePedidoRow = CType(Me.NewRow,DetallePedidoRow)
            rowDetallePedidoRow.ItemArray = New Object() {NoPedido, CodProducto, MetodoEntrega, PresionInicial, PresionFinal, NivelInicial, NivelFinal, PesoInicial, PesoFinal, Cantidad, PrecioUnitario, PrecioTotal, PocentajeDescuento, PorcentajeImpuesto, MontoDescuento, MontoImpuesto, parentTanquesClienteRowByTanquesCliente_DetallePedido(0), Kilometraje, Tanque}
            Me.Rows.Add(rowDetallePedidoRow)
            Return rowDetallePedidoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNoPedidoCodProductoCodTanque(ByVal NoPedido As String, ByVal CodProducto As String, ByVal CodTanque As String) As DetallePedidoRow
            Return CType(Me.Rows.Find(New Object() {NoPedido, CodProducto, CodTanque}),DetallePedidoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DetallePedidoDataTable = CType(MyBase.Clone,DetallePedidoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DetallePedidoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNoPedido = MyBase.Columns("NoPedido")
            Me.columnCodProducto = MyBase.Columns("CodProducto")
            Me.columnMetodoEntrega = MyBase.Columns("MetodoEntrega")
            Me.columnPresionInicial = MyBase.Columns("PresionInicial")
            Me.columnPresionFinal = MyBase.Columns("PresionFinal")
            Me.columnNivelInicial = MyBase.Columns("NivelInicial")
            Me.columnNivelFinal = MyBase.Columns("NivelFinal")
            Me.columnPesoInicial = MyBase.Columns("PesoInicial")
            Me.columnPesoFinal = MyBase.Columns("PesoFinal")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnPrecioUnitario = MyBase.Columns("PrecioUnitario")
            Me.columnPrecioTotal = MyBase.Columns("PrecioTotal")
            Me.columnPocentajeDescuento = MyBase.Columns("PocentajeDescuento")
            Me.columnPorcentajeImpuesto = MyBase.Columns("PorcentajeImpuesto")
            Me.columnMontoDescuento = MyBase.Columns("MontoDescuento")
            Me.columnMontoImpuesto = MyBase.Columns("MontoImpuesto")
            Me.columnCodTanque = MyBase.Columns("CodTanque")
            Me.columnKilometraje = MyBase.Columns("Kilometraje")
            Me.columnTanque = MyBase.Columns("Tanque")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNoPedido = New System.Data.DataColumn("NoPedido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoPedido)
            Me.columnCodProducto = New System.Data.DataColumn("CodProducto", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodProducto)
            Me.columnMetodoEntrega = New System.Data.DataColumn("MetodoEntrega", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMetodoEntrega)
            Me.columnPresionInicial = New System.Data.DataColumn("PresionInicial", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresionInicial)
            Me.columnPresionFinal = New System.Data.DataColumn("PresionFinal", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPresionFinal)
            Me.columnNivelInicial = New System.Data.DataColumn("NivelInicial", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNivelInicial)
            Me.columnNivelFinal = New System.Data.DataColumn("NivelFinal", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNivelFinal)
            Me.columnPesoInicial = New System.Data.DataColumn("PesoInicial", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPesoInicial)
            Me.columnPesoFinal = New System.Data.DataColumn("PesoFinal", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPesoFinal)
            Me.columnCantidad = New System.Data.DataColumn("Cantidad", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnPrecioUnitario = New System.Data.DataColumn("PrecioUnitario", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioUnitario)
            Me.columnPrecioTotal = New System.Data.DataColumn("PrecioTotal", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioTotal)
            Me.columnPocentajeDescuento = New System.Data.DataColumn("PocentajeDescuento", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPocentajeDescuento)
            Me.columnPorcentajeImpuesto = New System.Data.DataColumn("PorcentajeImpuesto", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentajeImpuesto)
            Me.columnMontoDescuento = New System.Data.DataColumn("MontoDescuento", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoDescuento)
            Me.columnMontoImpuesto = New System.Data.DataColumn("MontoImpuesto", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoImpuesto)
            Me.columnCodTanque = New System.Data.DataColumn("CodTanque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodTanque)
            Me.columnKilometraje = New System.Data.DataColumn("Kilometraje", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKilometraje)
            Me.columnTanque = New System.Data.DataColumn("Tanque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTanque)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnNoPedido, Me.columnCodProducto, Me.columnCodTanque}, true))
            Me.columnNoPedido.AllowDBNull = false
            Me.columnNoPedido.MaxLength = 10
            Me.columnCodProducto.AllowDBNull = false
            Me.columnCodProducto.MaxLength = 8
            Me.columnMetodoEntrega.MaxLength = 1
            Me.columnCodTanque.AllowDBNull = false
            Me.columnCodTanque.MaxLength = 15
            Me.columnKilometraje.MaxLength = 7
            Me.columnTanque.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetallePedidoRow() As DetallePedidoRow
            Return CType(Me.NewRow,DetallePedidoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DetallePedidoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetallePedidoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.TanqueColumn.Expression = "Parent.Descripcion"
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetallePedidoRowChangedEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowChanged(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetallePedidoRowChangingEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowChanging(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetallePedidoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowDeleted(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetallePedidoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetallePedidoRowDeleting(Me, New DetallePedidoRowChangeEvent(CType(e.Row,DetallePedidoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetallePedidoRow(ByVal row As DetallePedidoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As VentaDataSet = New VentaDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetallePedidoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class DetalleFacturaRow
        Inherits System.Data.DataRow
        
        Private tableDetalleFactura As DetalleFacturaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleFactura = CType(Me.Table,DetalleFacturaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoFactura() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.TipoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.TipoFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoFactura() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.NoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.NoFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.PrefijoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetalleFactura.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetalleFactura.CodProductoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.CapacidadColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Capacidad' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.CapacidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pertenencia() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.PertenenciaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pertenencia' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.PertenenciaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedidaReal() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.UnidadMedidaRealColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'UnidadMedidaReal' de la tabla 'DetalleFactura' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.UnidadMedidaRealColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnidadMedidaVenta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.UnidadMedidaVentaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'UnidadMedidaVenta' de la tabla 'DetalleFactura' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.UnidadMedidaVentaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.CantidadColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.CantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.PrecioUnitarioColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PrecioUnitario' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoFlete() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.MontoFleteColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoFlete' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoFleteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDescuento() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.MontoDescuentoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoDescuento' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoDescuentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoImpuesto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.MontoImpuestoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoImpuesto' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoImpuestoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotalItem() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.MontoTotalItemColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoTotalItem' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.MontoTotalItemColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleFactura.DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'DetalleFactura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleFactura.DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapacidadNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.CapacidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapacidadNull()
            Me(Me.tableDetalleFactura.CapacidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPertenenciaNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.PertenenciaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPertenenciaNull()
            Me(Me.tableDetalleFactura.PertenenciaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadMedidaRealNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.UnidadMedidaRealColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadMedidaRealNull()
            Me(Me.tableDetalleFactura.UnidadMedidaRealColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadMedidaVentaNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.UnidadMedidaVentaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadMedidaVentaNull()
            Me(Me.tableDetalleFactura.UnidadMedidaVentaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.CantidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableDetalleFactura.CantidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.PrecioUnitarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableDetalleFactura.PrecioUnitarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoFleteNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.MontoFleteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoFleteNull()
            Me(Me.tableDetalleFactura.MontoFleteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.MontoDescuentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoDescuentoNull()
            Me(Me.tableDetalleFactura.MontoDescuentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoImpuestoNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.MontoImpuestoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoImpuestoNull()
            Me(Me.tableDetalleFactura.MontoImpuestoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalItemNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.MontoTotalItemColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalItemNull()
            Me(Me.tableDetalleFactura.MontoTotalItemColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableDetalleFactura.DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableDetalleFactura.DescripcionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class MaestroFacturasRow
        Inherits System.Data.DataRow
        
        Private tableMaestroFacturas As MaestroFacturasDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMaestroFacturas = CType(Me.Table,MaestroFacturasDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoFactura() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.TipoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.TipoFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoFactura() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.NoFacturaColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prefijo() As String
            Get
                Return CType(Me(Me.tableMaestroFacturas.PrefijoColumn),String)
            End Get
            Set
                Me(Me.tableMaestroFacturas.PrefijoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodSucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodSucursalColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodSucursal' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodSucursalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodClienteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodCliente' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodClienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.FechaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.FechaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.MonedaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.MonedaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Excepcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.ExcepcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Excepcion' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.ExcepcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodRuta() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodRutaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodRuta' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodRutaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTransportadora() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodTransportadoraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodTransportadora' de la tabla 'MaestroFacturas' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodTransportadoraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodChofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodChoferColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodChofer' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodChoferColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodVehiculo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodVehiculoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodVehiculo' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodVehiculoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoViaje() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.NoViajeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NoViaje' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoViajeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTipoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodTipoPagoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodTipoPago' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodTipoPagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoDiasCredito() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.NoDiasCreditoColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NoDiasCredito' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoDiasCreditoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrdenCompra() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.OrdenCompraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OrdenCompra' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.OrdenCompraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoFactura() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.MontoFacturaColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoFactura' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.MontoFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoFlete() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.MontoFleteColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoFlete' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.MontoFleteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descuento() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.DescuentoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Descuento' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.DescuentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.ImpuestoTotalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ImpuestoTotal' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.ImpuestoTotalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodEntidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.CodEntidadColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'CodEntidad' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.CodEntidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPedido() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.NoPedidoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NoPedido' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.NoPedidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstadoFactura() As String
            Get
                Try 
                    Return CType(Me(Me.tableMaestroFacturas.EstadoFacturaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'EstadoFactura' de la tabla 'MaestroFacturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMaestroFacturas.EstadoFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodSucursalNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodSucursalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodSucursalNull()
            Me(Me.tableMaestroFacturas.CodSucursalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodClienteNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodClienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodClienteNull()
            Me(Me.tableMaestroFacturas.CodClienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.FechaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableMaestroFacturas.FechaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.MonedaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tableMaestroFacturas.MonedaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExcepcionNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.ExcepcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExcepcionNull()
            Me(Me.tableMaestroFacturas.ExcepcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodRutaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodRutaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodRutaNull()
            Me(Me.tableMaestroFacturas.CodRutaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodTransportadoraNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodTransportadoraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodTransportadoraNull()
            Me(Me.tableMaestroFacturas.CodTransportadoraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodChoferNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodChoferColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodChoferNull()
            Me(Me.tableMaestroFacturas.CodChoferColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodVehiculoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodVehiculoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodVehiculoNull()
            Me(Me.tableMaestroFacturas.CodVehiculoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoViajeNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.NoViajeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoViajeNull()
            Me(Me.tableMaestroFacturas.NoViajeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodTipoPagoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodTipoPagoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodTipoPagoNull()
            Me(Me.tableMaestroFacturas.CodTipoPagoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoDiasCreditoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.NoDiasCreditoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoDiasCreditoNull()
            Me(Me.tableMaestroFacturas.NoDiasCreditoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdenCompraNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.OrdenCompraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdenCompraNull()
            Me(Me.tableMaestroFacturas.OrdenCompraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoFacturaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.MontoFacturaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoFacturaNull()
            Me(Me.tableMaestroFacturas.MontoFacturaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoFleteNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.MontoFleteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoFleteNull()
            Me(Me.tableMaestroFacturas.MontoFleteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.DescuentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoNull()
            Me(Me.tableMaestroFacturas.DescuentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoTotalNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.ImpuestoTotalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoTotalNull()
            Me(Me.tableMaestroFacturas.ImpuestoTotalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodEntidadNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.CodEntidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodEntidadNull()
            Me(Me.tableMaestroFacturas.CodEntidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoPedidoNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.NoPedidoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoPedidoNull()
            Me(Me.tableMaestroFacturas.NoPedidoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoFacturaNull() As Boolean
            Return Me.IsNull(Me.tableMaestroFacturas.EstadoFacturaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoFacturaNull()
            Me(Me.tableMaestroFacturas.EstadoFacturaColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class TanquesClienteRow
        Inherits System.Data.DataRow
        
        Private tableTanquesCliente As TanquesClienteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTanquesCliente = CType(Me.Table,TanquesClienteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoTanque() As String
            Get
                Return CType(Me(Me.tableTanquesCliente.NoTanqueColumn),String)
            End Get
            Set
                Me(Me.tableTanquesCliente.NoTanqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTanquesCliente.DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'TanquesCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTanquesCliente.DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Capacidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTanquesCliente.CapacidadColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Capacidad' de la tabla 'TanquesCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTanquesCliente.CapacidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdFabricante() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTanquesCliente.IdFabricanteColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IdFabricante' de la tabla 'TanquesCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTanquesCliente.IdFabricanteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdGrupoRecipiente() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTanquesCliente.IdGrupoRecipienteColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IdGrupoRecipiente' de la tabla 'TanquesCliente' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTanquesCliente.IdGrupoRecipienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdFamilia() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTanquesCliente.IdFamiliaColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IdFamilia' de la tabla 'TanquesCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTanquesCliente.IdFamiliaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdTipo() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTanquesCliente.IdTipoColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'IdTipo' de la tabla 'TanquesCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTanquesCliente.IdTipoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductoTanque() As String
            Get
                Try 
                    Return CType(Me(Me.tableTanquesCliente.ProductoTanqueColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'ProductoTanque' de la tabla 'TanquesCliente' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTanquesCliente.ProductoTanqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tableTanquesCliente.DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tableTanquesCliente.DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCapacidadNull() As Boolean
            Return Me.IsNull(Me.tableTanquesCliente.CapacidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCapacidadNull()
            Me(Me.tableTanquesCliente.CapacidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdFabricanteNull() As Boolean
            Return Me.IsNull(Me.tableTanquesCliente.IdFabricanteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdFabricanteNull()
            Me(Me.tableTanquesCliente.IdFabricanteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdGrupoRecipienteNull() As Boolean
            Return Me.IsNull(Me.tableTanquesCliente.IdGrupoRecipienteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdGrupoRecipienteNull()
            Me(Me.tableTanquesCliente.IdGrupoRecipienteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdFamiliaNull() As Boolean
            Return Me.IsNull(Me.tableTanquesCliente.IdFamiliaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdFamiliaNull()
            Me(Me.tableTanquesCliente.IdFamiliaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdTipoNull() As Boolean
            Return Me.IsNull(Me.tableTanquesCliente.IdTipoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdTipoNull()
            Me(Me.tableTanquesCliente.IdTipoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductoTanqueNull() As Boolean
            Return Me.IsNull(Me.tableTanquesCliente.ProductoTanqueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductoTanqueNull()
            Me(Me.tableTanquesCliente.ProductoTanqueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDetallePedidoRows() As DetallePedidoRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TanquesCliente_DetallePedido")),DetallePedidoRow())
        End Function
    End Class
    
    Partial Public Class AforosRow
        Inherits System.Data.DataRow
        
        Private tableAforos As AforosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAforos = CType(Me.Table,AforosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nivel() As Short
            Get
                Return CType(Me(Me.tableAforos.NivelColumn),Short)
            End Get
            Set
                Me(Me.tableAforos.NivelColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAforos.CantidadColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'Aforos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAforos.CantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableAforos.CantidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableAforos.CantidadColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class PrecintosRow
        Inherits System.Data.DataRow
        
        Private tablePrecintos As PrecintosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrecintos = CType(Me.Table,PrecintosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPedido() As String
            Get
                Return CType(Me(Me.tablePrecintos.NoPedidoColumn),String)
            End Get
            Set
                Me(Me.tablePrecintos.NoPedidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTanque() As String
            Get
                Return CType(Me(Me.tablePrecintos.CodTanqueColumn),String)
            End Get
            Set
                Me(Me.tablePrecintos.CodTanqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precinto() As String
            Get
                Return CType(Me(Me.tablePrecintos.PrecintoColumn),String)
            End Get
            Set
                Me(Me.tablePrecintos.PrecintoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Return CType(Me(Me.tablePrecintos.TipoColumn),String)
            End Get
            Set
                Me(Me.tablePrecintos.TipoColumn) = value
            End Set
        End Property
    End Class
    
    Partial Public Class DetallePedidoRow
        Inherits System.Data.DataRow
        
        Private tableDetallePedido As DetallePedidoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetallePedido = CType(Me.Table,DetallePedidoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoPedido() As String
            Get
                Return CType(Me(Me.tableDetallePedido.NoPedidoColumn),String)
            End Get
            Set
                Me(Me.tableDetallePedido.NoPedidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodProducto() As String
            Get
                Return CType(Me(Me.tableDetallePedido.CodProductoColumn),String)
            End Get
            Set
                Me(Me.tableDetallePedido.CodProductoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MetodoEntrega() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MetodoEntregaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MetodoEntrega' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MetodoEntregaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PresionInicial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PresionInicialColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PresionInicial' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PresionInicialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PresionFinal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PresionFinalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PresionFinal' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PresionFinalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NivelInicial() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.NivelInicialColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NivelInicial' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.NivelInicialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NivelFinal() As Short
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.NivelFinalColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'NivelFinal' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.NivelFinalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PesoInicial() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PesoInicialColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PesoInicial' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PesoInicialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PesoFinal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PesoFinalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PesoFinal' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PesoFinalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.CantidadColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.CantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioUnitario() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PrecioUnitarioColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PrecioUnitario' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PrecioTotalColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PrecioTotal' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PrecioTotalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PocentajeDescuento() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PocentajeDescuentoColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PocentajeDescuento' de la tabla 'DetallePedido' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PocentajeDescuentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcentajeImpuesto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.PorcentajeImpuestoColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PorcentajeImpuesto' de la tabla 'DetallePedido' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.PorcentajeImpuestoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoDescuento() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MontoDescuentoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoDescuento' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MontoDescuentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoImpuesto() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.MontoImpuestoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MontoImpuesto' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.MontoImpuestoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodTanque() As String
            Get
                Return CType(Me(Me.tableDetallePedido.CodTanqueColumn),String)
            End Get
            Set
                Me(Me.tableDetallePedido.CodTanqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Kilometraje() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.KilometrajeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Kilometraje' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.KilometrajeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tanque() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetallePedido.TanqueColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Tanque' de la tabla 'DetallePedido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetallePedido.TanqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TanquesClienteRow() As TanquesClienteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TanquesCliente_DetallePedido")),TanquesClienteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TanquesCliente_DetallePedido"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMetodoEntregaNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MetodoEntregaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMetodoEntregaNull()
            Me(Me.tableDetallePedido.MetodoEntregaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPresionInicialNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PresionInicialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPresionInicialNull()
            Me(Me.tableDetallePedido.PresionInicialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPresionFinalNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PresionFinalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPresionFinalNull()
            Me(Me.tableDetallePedido.PresionFinalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNivelInicialNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.NivelInicialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNivelInicialNull()
            Me(Me.tableDetallePedido.NivelInicialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNivelFinalNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.NivelFinalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNivelFinalNull()
            Me(Me.tableDetallePedido.NivelFinalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPesoInicialNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PesoInicialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPesoInicialNull()
            Me(Me.tableDetallePedido.PesoInicialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPesoFinalNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PesoFinalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPesoFinalNull()
            Me(Me.tableDetallePedido.PesoFinalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.CantidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableDetallePedido.CantidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PrecioUnitarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioUnitarioNull()
            Me(Me.tableDetallePedido.PrecioUnitarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioTotalNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PrecioTotalColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioTotalNull()
            Me(Me.tableDetallePedido.PrecioTotalColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPocentajeDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PocentajeDescuentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPocentajeDescuentoNull()
            Me(Me.tableDetallePedido.PocentajeDescuentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeImpuestoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.PorcentajeImpuestoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeImpuestoNull()
            Me(Me.tableDetallePedido.PorcentajeImpuestoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoDescuentoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MontoDescuentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoDescuentoNull()
            Me(Me.tableDetallePedido.MontoDescuentoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoImpuestoNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.MontoImpuestoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoImpuestoNull()
            Me(Me.tableDetallePedido.MontoImpuestoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKilometrajeNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.KilometrajeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKilometrajeNull()
            Me(Me.tableDetallePedido.KilometrajeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTanqueNull() As Boolean
            Return Me.IsNull(Me.tableDetallePedido.TanqueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTanqueNull()
            Me(Me.tableDetallePedido.TanqueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class DetalleFacturaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DetalleFacturaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleFacturaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleFacturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class MaestroFacturasRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MaestroFacturasRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MaestroFacturasRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MaestroFacturasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class TanquesClienteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TanquesClienteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TanquesClienteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TanquesClienteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class AforosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AforosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AforosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AforosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class PrecintosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PrecintosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PrecintosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PrecintosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class DetallePedidoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DetallePedidoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetallePedidoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetallePedidoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace VentaDataSetTableAdapters
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetalleFacturaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        'manejo de transaccion en el tableAdapter
        'Private _Transaction As System.Data.SqlServerCe.SqlCeTransaction
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Transaccion() As System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return _adapter.SelectCommand.Transaction
            End Get
            Set(ByVal value As System.Data.SqlServerCe.SqlCeTransaction)
                If _adapter Is Nothing Then InitAdapter()
                For Each cmd As System.Data.SqlServerCe.SqlCeCommand In Me.CommandCollection
                    cmd.Transaction = value
                Next
                If Not _adapter.InsertCommand Is Nothing Then _
                    _adapter.InsertCommand.Transaction = value
                If Not _adapter.UpdateCommand Is Nothing Then _
                    _adapter.UpdateCommand.Transaction = value
                If Not _adapter.DeleteCommand Is Nothing Then _
                    _adapter.DeleteCommand.Transaction = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleFactura"
            tableMapping.ColumnMappings.Add("TipoFactura", "TipoFactura")
            tableMapping.ColumnMappings.Add("NoFactura", "NoFactura")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("Pertenencia", "Pertenencia")
            tableMapping.ColumnMappings.Add("UnidadMedidaReal", "UnidadMedidaReal")
            tableMapping.ColumnMappings.Add("UnidadMedidaVenta", "UnidadMedidaVenta")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("MontoFlete", "MontoFlete")
            tableMapping.ColumnMappings.Add("MontoDescuento", "MontoDescuento")
            tableMapping.ColumnMappings.Add("MontoImpuesto", "MontoImpuesto")
            tableMapping.ColumnMappings.Add("MontoTotalItem", "MontoTotalItem")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetalleFactura] WHERE (([TipoFactura] = @p1) AND ([NoFactura] = @p2)"& _ 
                " AND ([Prefijo] = @p3) AND ([CodProducto] = @p4))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetalleFactura] ([TipoFactura], [NoFactura], [Prefijo], [CodProducto"& _ 
                "], [Capacidad], [Pertenencia], [UnidadMedidaReal], [UnidadMedidaVenta], [Cantida"& _ 
                "d], [PrecioUnitario], [MontoFlete], [MontoDescuento], [MontoImpuesto], [MontoTot"& _ 
                "alItem], [Descripcion]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p1"& _ 
                "0, @p11, @p12, @p13, @p14, @p15)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaReal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioUnitario"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoDescuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoImpuesto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalItem"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetalleFactura] SET [TipoFactura] = @p1, [NoFactura] = @p2, [Prefijo] = @"& _ 
                "p3, [CodProducto] = @p4, [Capacidad] = @p5, [Pertenencia] = @p6, [UnidadMedidaRe"& _ 
                "al] = @p7, [UnidadMedidaVenta] = @p8, [Cantidad] = @p9, [PrecioUnitario] = @p10,"& _ 
                " [MontoFlete] = @p11, [MontoDescuento] = @p12, [MontoImpuesto] = @p13, [MontoTot"& _ 
                "alItem] = @p14, [Descripcion] = @p15 WHERE (([TipoFactura] = @p16) AND ([NoFactu"& _ 
                "ra] = @p17) AND ([Prefijo] = @p18) AND ([CodProducto] = @p19))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "Capacidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "Pertenencia"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaReal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "UnidadMedidaVenta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioUnitario"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoDescuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoImpuesto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoTotalItem"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.IsNullable = true
            param.SourceColumn = "Descripcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [TipoFactura], [NoFactura], [Prefijo], [CodProducto], [Capacidad], [Perten"& _ 
                "encia], [UnidadMedidaReal], [UnidadMedidaVenta], [Cantidad], [PrecioUnitario], ["& _ 
                "MontoFlete], [MontoDescuento], [MontoImpuesto], [MontoTotalItem], [Descripcion] "& _ 
                "FROM [DetalleFactura]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.DetalleFacturaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.DetalleFacturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.DetalleFacturaDataTable = New VentaDataSet.DetalleFacturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.DetalleFacturaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleFactura")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String, ByVal p9 As System.Nullable(Of Decimal), ByVal p10 As System.Nullable(Of Decimal), ByVal p11 As System.Nullable(Of Decimal), ByVal p12 As System.Nullable(Of Decimal), ByVal p13 As System.Nullable(Of Decimal), ByVal p14 As System.Nullable(Of Decimal), ByVal p15 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As String,  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As System.Nullable(Of Decimal),  _
                    ByVal p10 As System.Nullable(Of Decimal),  _
                    ByVal p11 As System.Nullable(Of Decimal),  _
                    ByVal p12 As System.Nullable(Of Decimal),  _
                    ByVal p13 As System.Nullable(Of Decimal),  _
                    ByVal p14 As System.Nullable(Of Decimal),  _
                    ByVal p15 As String,  _
                    ByVal p16 As String,  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (p15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15,String)
            End If
            If (p16 Is Nothing) Then
                Throw New System.ArgumentNullException("p16")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17 Is Nothing) Then
                Throw New System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Throw New System.ArgumentNullException("p18")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Throw New System.ArgumentNullException("p19")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class MaestroFacturasTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MaestroFacturas"
            tableMapping.ColumnMappings.Add("TipoFactura", "TipoFactura")
            tableMapping.ColumnMappings.Add("NoFactura", "NoFactura")
            tableMapping.ColumnMappings.Add("Prefijo", "Prefijo")
            tableMapping.ColumnMappings.Add("CodSucursal", "CodSucursal")
            tableMapping.ColumnMappings.Add("CodCliente", "CodCliente")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Moneda", "Moneda")
            tableMapping.ColumnMappings.Add("Excepcion", "Excepcion")
            tableMapping.ColumnMappings.Add("CodRuta", "CodRuta")
            tableMapping.ColumnMappings.Add("CodTransportadora", "CodTransportadora")
            tableMapping.ColumnMappings.Add("CodChofer", "CodChofer")
            tableMapping.ColumnMappings.Add("CodVehiculo", "CodVehiculo")
            tableMapping.ColumnMappings.Add("NoViaje", "NoViaje")
            tableMapping.ColumnMappings.Add("CodTipoPago", "CodTipoPago")
            tableMapping.ColumnMappings.Add("NoDiasCredito", "NoDiasCredito")
            tableMapping.ColumnMappings.Add("OrdenCompra", "OrdenCompra")
            tableMapping.ColumnMappings.Add("MontoFactura", "MontoFactura")
            tableMapping.ColumnMappings.Add("MontoFlete", "MontoFlete")
            tableMapping.ColumnMappings.Add("Descuento", "Descuento")
            tableMapping.ColumnMappings.Add("ImpuestoTotal", "ImpuestoTotal")
            tableMapping.ColumnMappings.Add("CodEntidad", "CodEntidad")
            tableMapping.ColumnMappings.Add("NoPedido", "NoPedido")
            tableMapping.ColumnMappings.Add("EstadoFactura", "EstadoFactura")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MaestroFacturas] WHERE (([TipoFactura] = @p1) AND ([NoFactura] = @p2"& _ 
                ") AND ([Prefijo] = @p3))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MaestroFacturas] ([TipoFactura], [NoFactura], [Prefijo], [CodSucursa"& _ 
                "l], [CodCliente], [Fecha], [Moneda], [Excepcion], [CodRuta], [CodTransportadora]"& _ 
                ", [CodChofer], [CodVehiculo], [NoViaje], [CodTipoPago], [NoDiasCredito], [OrdenC"& _ 
                "ompra], [MontoFactura], [MontoFlete], [Descuento], [ImpuestoTotal], [CodEntidad]"& _ 
                ", [NoPedido], [EstadoFactura]) VALUES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @"& _ 
                "p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18, @p19, @p20, @p21, @p22"& _ 
                ", @p23)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Fecha"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Moneda"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "Excepcion"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodRuta"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "CodTransportadora"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "CodChofer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodVehiculo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "NoViaje"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodTipoPago"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NoDiasCredito"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "OrdenCompra"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Descuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ImpuestoTotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "CodEntidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "EstadoFactura"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MaestroFacturas] SET [TipoFactura] = @p1, [NoFactura] = @p2, [Prefijo] = "& _ 
                "@p3, [CodSucursal] = @p4, [CodCliente] = @p5, [Fecha] = @p6, [Moneda] = @p7, [Ex"& _ 
                "cepcion] = @p8, [CodRuta] = @p9, [CodTransportadora] = @p10, [CodChofer] = @p11,"& _ 
                " [CodVehiculo] = @p12, [NoViaje] = @p13, [CodTipoPago] = @p14, [NoDiasCredito] ="& _ 
                " @p15, [OrdenCompra] = @p16, [MontoFactura] = @p17, [MontoFlete] = @p18, [Descue"& _ 
                "nto] = @p19, [ImpuestoTotal] = @p20, [CodEntidad] = @p21, [NoPedido] = @p22, [Es"& _ 
                "tadoFactura] = @p23 WHERE (([TipoFactura] = @p24) AND ([NoFactura] = @p25) AND ("& _ 
                "[Prefijo] = @p26))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "CodSucursal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "CodCliente"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.DateTime
            param.IsNullable = true
            param.SourceColumn = "Fecha"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Moneda"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "Excepcion"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.IsNullable = true
            param.SourceColumn = "CodRuta"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.IsNullable = true
            param.SourceColumn = "CodTransportadora"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.IsNullable = true
            param.SourceColumn = "CodChofer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.IsNullable = true
            param.SourceColumn = "CodVehiculo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.IsNullable = true
            param.SourceColumn = "NoViaje"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.IsNullable = true
            param.SourceColumn = "CodTipoPago"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NoDiasCredito"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.IsNullable = true
            param.SourceColumn = "OrdenCompra"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoFlete"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Descuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "ImpuestoTotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "CodEntidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p22"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p23"
            param.IsNullable = true
            param.SourceColumn = "EstadoFactura"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p24"
            param.IsNullable = true
            param.SourceColumn = "TipoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p25"
            param.IsNullable = true
            param.SourceColumn = "NoFactura"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p26"
            param.IsNullable = true
            param.SourceColumn = "Prefijo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TipoFactura, NoFactura, Prefijo, CodSucursal, CodCliente, Fecha, Moned"& _ 
                "a, Excepcion, CodRuta, CodTransportadora, CodChofer, CodVehiculo, NoViaje, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   CodTipoPago, NoDiasCredito, OrdenCompra, MontoFactura, MontoF"& _ 
                "lete, Descuento, ImpuestoTotal, CodEntidad, NoPedido, EstadoFactura"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM       "& _ 
                "  MaestroFacturas"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.MaestroFacturasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.MaestroFacturasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.MaestroFacturasDataTable = New VentaDataSet.MaestroFacturasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.MaestroFacturasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MaestroFacturas")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As System.Nullable(Of Date),  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As System.Nullable(Of Short),  _
                    ByVal p16 As String,  _
                    ByVal p17 As System.Nullable(Of Decimal),  _
                    ByVal p18 As System.Nullable(Of Decimal),  _
                    ByVal p19 As System.Nullable(Of Decimal),  _
                    ByVal p20 As System.Nullable(Of Decimal),  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (p19.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(p19.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (p20.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(p20.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (p21 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p23,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As String,  _
                    ByVal p5 As String,  _
                    ByVal p6 As System.Nullable(Of Date),  _
                    ByVal p7 As String,  _
                    ByVal p8 As String,  _
                    ByVal p9 As String,  _
                    ByVal p10 As String,  _
                    ByVal p11 As String,  _
                    ByVal p12 As String,  _
                    ByVal p13 As String,  _
                    ByVal p14 As String,  _
                    ByVal p15 As System.Nullable(Of Short),  _
                    ByVal p16 As String,  _
                    ByVal p17 As System.Nullable(Of Decimal),  _
                    ByVal p18 As System.Nullable(Of Decimal),  _
                    ByVal p19 As System.Nullable(Of Decimal),  _
                    ByVal p20 As System.Nullable(Of Decimal),  _
                    ByVal p21 As String,  _
                    ByVal p22 As String,  _
                    ByVal p23 As String,  _
                    ByVal p24 As String,  _
                    ByVal p25 As String,  _
                    ByVal p26 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            If (p9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9,String)
            End If
            If (p10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10,String)
            End If
            If (p11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11,String)
            End If
            If (p12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12,String)
            End If
            If (p13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13,String)
            End If
            If (p14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14,String)
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (p16 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16,String)
            End If
            If (p17.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (p18.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (p19.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (p20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (p21 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21,String)
            End If
            If (p22 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(p22,String)
            End If
            If (p23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23,String)
            End If
            If (p24 Is Nothing) Then
                Throw New System.ArgumentNullException("p24")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(p24,String)
            End If
            If (p25 Is Nothing) Then
                Throw New System.ArgumentNullException("p25")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(p25,String)
            End If
            If (p26 Is Nothing) Then
                Throw New System.ArgumentNullException("p26")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(p26,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class TanquesClienteTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TanquesCliente"
            tableMapping.ColumnMappings.Add("NoTanque", "NoTanque")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("Capacidad", "Capacidad")
            tableMapping.ColumnMappings.Add("IdFabricante", "IdFabricante")
            tableMapping.ColumnMappings.Add("IdGrupoRecipiente", "IdGrupoRecipiente")
            tableMapping.ColumnMappings.Add("IdFamilia", "IdFamilia")
            tableMapping.ColumnMappings.Add("IdTipo", "IdTipo")
            tableMapping.ColumnMappings.Add("ProductoTanque", "ProductoTanque")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Tanques.NoTanque, Tanques.Descripcion, Tanques.Capacidad, Tanques.IdFa"& _ 
                "bricante, Tanques.IdGrupoRecipiente, Tanques.IdFamilia, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "Tanques.IdTipo, ClienteTanque.ProductoTanque"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Tanques INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                     ClienteTanque ON Tanques.NoTanque = ClienteTanque.NoTanque"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ClienteTanque.CodigoCliente = @CodCliente) AND (ClienteTanque.Produc"& _ 
                "toTanque = @CodProducto)"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodCliente"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "CodigoCliente"
            Me._commandCollection(0).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@CodProducto"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "ProductoTanque"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.TanquesClienteDataTable, ByVal CodCliente As String, ByVal CodProducto As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            If (CodProducto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodProducto,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CodCliente As String, ByVal CodProducto As String) As VentaDataSet.TanquesClienteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CodCliente Is Nothing) Then
                Throw New System.ArgumentNullException("CodCliente")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CodCliente,String)
            End If
            If (CodProducto Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CodProducto,String)
            End If
            Dim dataTable As VentaDataSet.TanquesClienteDataTable = New VentaDataSet.TanquesClienteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class AforosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Aforos"
            tableMapping.ColumnMappings.Add("Nivel", "Nivel")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Nivel, Cantidad"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Aforos"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (IdFabricante = @IdFab"& _ 
                "ricante) AND (IdTipo = @IdTipo) AND (IdFamilia = @IdFamilia) AND (IdGrupo = @IdG"& _ 
                "rupo)"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@IdFabricante"
            param.DbType = System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "IdFabricante"
            Me._commandCollection(0).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@IdTipo"
            param.DbType = System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "IdTipo"
            Me._commandCollection(0).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@IdFamilia"
            param.DbType = System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "IdFamilia"
            Me._commandCollection(0).Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@IdGrupo"
            param.DbType = System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "IdGrupo"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.AforosDataTable, ByVal IdFabricante As Integer, ByVal IdTipo As Integer, ByVal IdFamilia As Integer, ByVal IdGrupo As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(IdFabricante,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(IdTipo,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(IdFamilia,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(IdGrupo,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class PrecintosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Precintos"
            tableMapping.ColumnMappings.Add("NoPedido", "NoPedido")
            tableMapping.ColumnMappings.Add("CodTanque", "CodTanque")
            tableMapping.ColumnMappings.Add("Precinto", "Precinto")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Precintos] WHERE (([NoPedido] = @p1) AND ([CodTanque] = @p2) AND ([P"& _ 
                "recinto] = @p3) AND ([Tipo] = @p4))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Precinto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Tipo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Precintos] ([NoPedido], [CodTanque], [Precinto], [Tipo]) VALUES (@p1"& _ 
                ", @p2, @p3, @p4)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Precinto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Tipo"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Precintos] SET [NoPedido] = @p1, [CodTanque] = @p2, [Precinto] = @p3, [Ti"& _ 
                "po] = @p4 WHERE (([NoPedido] = @p5) AND ([CodTanque] = @p6) AND ([Precinto] = @p"& _ 
                "7) AND ([Tipo] = @p8))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "Precinto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.IsNullable = true
            param.SourceColumn = "Tipo"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.IsNullable = true
            param.SourceColumn = "Precinto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.IsNullable = true
            param.SourceColumn = "Tipo"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoPedido], [CodTanque], [Precinto], [Tipo] FROM [Precintos]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.PrecintosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.PrecintosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.PrecintosDataTable = New VentaDataSet.PrecintosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.PrecintosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Precintos")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As String, ByVal p7 As String, ByVal p8 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4 Is Nothing) Then
                Throw New System.ArgumentNullException("p4")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4,String)
            End If
            If (p5 Is Nothing) Then
                Throw New System.ArgumentNullException("p5")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5,String)
            End If
            If (p6 Is Nothing) Then
                Throw New System.ArgumentNullException("p6")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6,String)
            End If
            If (p7 Is Nothing) Then
                Throw New System.ArgumentNullException("p7")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7,String)
            End If
            If (p8 Is Nothing) Then
                Throw New System.ArgumentNullException("p8")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.DataObjectAttribute(true)>  _
    Partial Public Class DetallePedidoTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlServerCe.SqlCeDataAdapter
        
        Private _connection As System.Data.SqlServerCe.SqlCeConnection
        
        Private _commandCollection() As System.Data.SqlServerCe.SqlCeCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlServerCe.SqlCeDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlServerCe.SqlCeConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlServerCe.SqlCeCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        'manejo de transaccion en el tableAdapter
        'Private _Transaction As System.Data.SqlServerCe.SqlCeTransaction
        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Property Transaccion() As System.Data.SqlServerCe.SqlCeTransaction
            Get
                Return _adapter.SelectCommand.Transaction
            End Get
            Set(ByVal value As System.Data.SqlServerCe.SqlCeTransaction)
                If _adapter Is Nothing Then InitAdapter()
                For Each cmd As System.Data.SqlServerCe.SqlCeCommand In Me.CommandCollection
                    cmd.Transaction = value
                Next
                If Not _adapter.InsertCommand Is Nothing Then _
                    _adapter.InsertCommand.Transaction = value
                If Not _adapter.UpdateCommand Is Nothing Then _
                    _adapter.UpdateCommand.Transaction = value
                If Not _adapter.DeleteCommand Is Nothing Then _
                    _adapter.DeleteCommand.Transaction = value
            End Set
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlServerCe.SqlCeCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlServerCe.SqlCeDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetallePedido"
            tableMapping.ColumnMappings.Add("NoPedido", "NoPedido")
            tableMapping.ColumnMappings.Add("CodProducto", "CodProducto")
            tableMapping.ColumnMappings.Add("MetodoEntrega", "MetodoEntrega")
            tableMapping.ColumnMappings.Add("PresionInicial", "PresionInicial")
            tableMapping.ColumnMappings.Add("PresionFinal", "PresionFinal")
            tableMapping.ColumnMappings.Add("NivelInicial", "NivelInicial")
            tableMapping.ColumnMappings.Add("NivelFinal", "NivelFinal")
            tableMapping.ColumnMappings.Add("PesoInicial", "PesoInicial")
            tableMapping.ColumnMappings.Add("PesoFinal", "PesoFinal")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("PrecioUnitario", "PrecioUnitario")
            tableMapping.ColumnMappings.Add("PrecioTotal", "PrecioTotal")
            tableMapping.ColumnMappings.Add("PocentajeDescuento", "PocentajeDescuento")
            tableMapping.ColumnMappings.Add("PorcentajeImpuesto", "PorcentajeImpuesto")
            tableMapping.ColumnMappings.Add("MontoDescuento", "MontoDescuento")
            tableMapping.ColumnMappings.Add("MontoImpuesto", "MontoImpuesto")
            tableMapping.ColumnMappings.Add("CodTanque", "CodTanque")
            tableMapping.ColumnMappings.Add("Kilometraje", "Kilometraje")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [DetallePedido] WHERE (([NoPedido] = @p1) AND ([CodProducto] = @p2) A"& _ 
                "ND ([CodTanque] = @p3))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Dim param As System.Data.SqlServerCe.SqlCeParameter = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [DetallePedido] ([NoPedido], [CodProducto], [MetodoEntrega], [Presion"& _ 
                "Inicial], [PresionFinal], [NivelInicial], [NivelFinal], [PesoInicial], [PesoFina"& _ 
                "l], [Cantidad], [PrecioUnitario], [PrecioTotal], [PocentajeDescuento], [Porcenta"& _ 
                "jeImpuesto], [MontoDescuento], [MontoImpuesto], [CodTanque], [Kilometraje]) VALU"& _ 
                "ES (@p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @"& _ 
                "p15, @p16, @p17, @p18)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "MetodoEntrega"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PresionInicial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PresionFinal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NivelInicial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NivelFinal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PesoInicial"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PesoFinal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioUnitario"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioTotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.DbType = System.Data.DbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "PocentajeDescuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.DbType = System.Data.DbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoDescuento"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoImpuesto"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Kilometraje"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New System.Data.SqlServerCe.SqlCeCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [DetallePedido] SET [NoPedido] = @p1, [CodProducto] = @p2, [MetodoEntrega]"& _ 
                " = @p3, [PresionInicial] = @p4, [PresionFinal] = @p5, [NivelInicial] = @p6, [Niv"& _ 
                "elFinal] = @p7, [PesoInicial] = @p8, [PesoFinal] = @p9, [Cantidad] = @p10, [Prec"& _ 
                "ioUnitario] = @p11, [PrecioTotal] = @p12, [PocentajeDescuento] = @p13, [Porcenta"& _ 
                "jeImpuesto] = @p14, [MontoDescuento] = @p15, [MontoImpuesto] = @p16, [CodTanque]"& _ 
                " = @p17, [Kilometraje] = @p18 WHERE (([NoPedido] = @p19) AND ([CodProducto] = @p"& _ 
                "20) AND ([CodTanque] = @p21))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p1"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p2"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p3"
            param.IsNullable = true
            param.SourceColumn = "MetodoEntrega"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p4"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PresionInicial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p5"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PresionFinal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p6"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NivelInicial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p7"
            param.DbType = System.Data.DbType.Int16
            param.IsNullable = true
            param.SourceColumn = "NivelFinal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p8"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PesoInicial"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p9"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PesoFinal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p10"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "Cantidad"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p11"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioUnitario"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p12"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "PrecioTotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p13"
            param.DbType = System.Data.DbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "PocentajeDescuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p14"
            param.DbType = System.Data.DbType.[Double]
            param.IsNullable = true
            param.SourceColumn = "PorcentajeImpuesto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p15"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoDescuento"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p16"
            param.DbType = System.Data.DbType.[Decimal]
            param.IsNullable = true
            param.SourceColumn = "MontoImpuesto"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p17"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p18"
            param.IsNullable = true
            param.SourceColumn = "Kilometraje"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p19"
            param.IsNullable = true
            param.SourceColumn = "NoPedido"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p20"
            param.IsNullable = true
            param.SourceColumn = "CodProducto"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New System.Data.SqlServerCe.SqlCeParameter
            param.ParameterName = "@p21"
            param.IsNullable = true
            param.SourceColumn = "CodTanque"
            param.SourceVersion = System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlServerCe.SqlCeConnection
            Me._connection.ConnectionString = ("Data Source ="  _
                        + (System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly.GetName.CodeBase) + "\Liquidos.sdf;"))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlServerCe.SqlCeCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlServerCe.SqlCeCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [NoPedido], [CodProducto], [MetodoEntrega], [PresionInicial], [PresionFina"& _ 
                "l], [NivelInicial], [NivelFinal], [PesoInicial], [PesoFinal], [Cantidad], [Preci"& _ 
                "oUnitario], [PrecioTotal], [PocentajeDescuento], [PorcentajeImpuesto], [MontoDes"& _ 
                "cuento], [MontoImpuesto], [CodTanque], [Kilometraje] FROM [DetallePedido]"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As VentaDataSet.DetallePedidoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As VentaDataSet.DetallePedidoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As VentaDataSet.DetallePedidoDataTable = New VentaDataSet.DetallePedidoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataTable As VentaDataSet.DetallePedidoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataSet As VentaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetallePedido")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Throw New System.ArgumentNullException("p3")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As System.Nullable(Of Decimal),  _
                    ByVal p5 As System.Nullable(Of Decimal),  _
                    ByVal p6 As System.Nullable(Of Short),  _
                    ByVal p7 As System.Nullable(Of Short),  _
                    ByVal p8 As System.Nullable(Of Decimal),  _
                    ByVal p9 As System.Nullable(Of Decimal),  _
                    ByVal p10 As System.Nullable(Of Decimal),  _
                    ByVal p11 As System.Nullable(Of Decimal),  _
                    ByVal p12 As System.Nullable(Of Decimal),  _
                    ByVal p13 As System.Nullable(Of Double),  _
                    ByVal p14 As System.Nullable(Of Double),  _
                    ByVal p15 As System.Nullable(Of Decimal),  _
                    ByVal p16 As System.Nullable(Of Decimal),  _
                    ByVal p17 As String,  _
                    ByVal p18 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(p11.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(p14.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(p15.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(p16.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (p17 Is Nothing) Then
                Throw New System.ArgumentNullException("p17")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(p18,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal p1 As String,  _
                    ByVal p2 As String,  _
                    ByVal p3 As String,  _
                    ByVal p4 As System.Nullable(Of Decimal),  _
                    ByVal p5 As System.Nullable(Of Decimal),  _
                    ByVal p6 As System.Nullable(Of Short),  _
                    ByVal p7 As System.Nullable(Of Short),  _
                    ByVal p8 As System.Nullable(Of Decimal),  _
                    ByVal p9 As System.Nullable(Of Decimal),  _
                    ByVal p10 As System.Nullable(Of Decimal),  _
                    ByVal p11 As System.Nullable(Of Decimal),  _
                    ByVal p12 As System.Nullable(Of Decimal),  _
                    ByVal p13 As System.Nullable(Of Double),  _
                    ByVal p14 As System.Nullable(Of Double),  _
                    ByVal p15 As System.Nullable(Of Decimal),  _
                    ByVal p16 As System.Nullable(Of Decimal),  _
                    ByVal p17 As String,  _
                    ByVal p18 As String,  _
                    ByVal p19 As String,  _
                    ByVal p20 As String,  _
                    ByVal p21 As String) As Integer
            If (p1 Is Nothing) Then
                Throw New System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1,String)
            End If
            If (p2 Is Nothing) Then
                Throw New System.ArgumentNullException("p2")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2,String)
            End If
            If (p3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3,String)
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p6.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (p8.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (p9.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (p11.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (p12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (p14.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (p15.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (p17 Is Nothing) Then
                Throw New System.ArgumentNullException("p17")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17,String)
            End If
            If (p18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18,String)
            End If
            If (p19 Is Nothing) Then
                Throw New System.ArgumentNullException("p19")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19,String)
            End If
            If (p20 Is Nothing) Then
                Throw New System.ArgumentNullException("p20")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20,String)
            End If
            If (p21 Is Nothing) Then
                Throw New System.ArgumentNullException("p21")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace

Namespace VentaDataSetUtil
    
    Partial Public Class DesignerUtil
        
        Public Shared Function IsDesignTime() As Boolean
            'Determine if this instance is running against .NET Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("B77A5C561934E089") Then
                    Return true
                End If
            End If
            Return false
        End Function
        
        Public Shared Function IsRunTime() As Boolean
            'Determine if this instance is running against .NET Compact Framework by using the MSCoreLib PublicKeyToken
            Dim mscorlibAssembly As System.Reflection.[Assembly] = GetType(Integer).Assembly
            If (Not (mscorlibAssembly) Is Nothing) Then
                If mscorlibAssembly.FullName.ToUpper.EndsWith("969DB8053D3322AC") Then
                    Return true
                End If
            End If
            Return false
        End Function
    End Class
End Namespace
